// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#include "transform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_transform_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CaliInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Can;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CarCanInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Image;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneOrigin;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ped_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tire_Line_Rect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Object;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Ped;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_Frame;
}  // namespace protobuf_transform_2eproto
namespace transform {
namespace proto {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class Ped_PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ped_Point>
      _instance;
} _Ped_Point_default_instance_;
class Point2iDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point2i>
      _instance;
} _Point2i_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rect>
      _instance;
} _Rect_default_instance_;
class Tire_Line_RectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tire_Line_Rect>
      _instance;
} _Tire_Line_Rect_default_instance_;
class Size2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Size2f>
      _instance;
} _Size2f_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Image>
      _instance;
} _Image_default_instance_;
class CanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Can>
      _instance;
} _Can_default_instance_;
class CarCanInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CarCanInfo>
      _instance;
} _CarCanInfo_default_instance_;
class CaliInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaliInfo>
      _instance;
} _CaliInfo_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class PedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ped>
      _instance;
} _Ped_default_instance_;
class LaneOriginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneOrigin>
      _instance;
} _LaneOrigin_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame>
      _instance;
} _Frame_default_instance_;
class MultiFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiFrame>
      _instance;
} _MultiFrame_default_instance_;
}  // namespace proto
}  // namespace transform
namespace protobuf_transform_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Point_default_instance_;
    new (ptr) ::transform::proto::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsPed_Point() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Ped_Point_default_instance_;
    new (ptr) ::transform::proto::Ped_Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Ped_Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ped_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPed_Point}, {}};

static void InitDefaultsPoint2i() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Point2i_default_instance_;
    new (ptr) ::transform::proto::Point2i();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Point2i::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point2i =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint2i}, {}};

static void InitDefaultsRect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Rect_default_instance_;
    new (ptr) ::transform::proto::Rect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Rect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRect}, {}};

static void InitDefaultsTire_Line_Rect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Tire_Line_Rect_default_instance_;
    new (ptr) ::transform::proto::Tire_Line_Rect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Tire_Line_Rect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tire_Line_Rect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTire_Line_Rect}, {}};

static void InitDefaultsSize2f() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Size2f_default_instance_;
    new (ptr) ::transform::proto::Size2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Size2f::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Size2f =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSize2f}, {}};

static void InitDefaultsImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Image_default_instance_;
    new (ptr) ::transform::proto::Image();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Image::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Image =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImage}, {}};

static void InitDefaultsCan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Can_default_instance_;
    new (ptr) ::transform::proto::Can();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Can::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Can =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCan}, {}};

static void InitDefaultsCarCanInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_CarCanInfo_default_instance_;
    new (ptr) ::transform::proto::CarCanInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::CarCanInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CarCanInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCarCanInfo}, {}};

static void InitDefaultsCaliInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_CaliInfo_default_instance_;
    new (ptr) ::transform::proto::CaliInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::CaliInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CaliInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCaliInfo}, {}};

static void InitDefaultsObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Object_default_instance_;
    new (ptr) ::transform::proto::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Object =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsObject}, {
      &protobuf_transform_2eproto::scc_info_Rect.base,
      &protobuf_transform_2eproto::scc_info_Tire_Line_Rect.base,
      &protobuf_transform_2eproto::scc_info_Point.base,}};

static void InitDefaultsPed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Ped_default_instance_;
    new (ptr) ::transform::proto::Ped();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Ped::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Ped =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPed}, {
      &protobuf_transform_2eproto::scc_info_Rect.base,
      &protobuf_transform_2eproto::scc_info_Ped_Point.base,
      &protobuf_transform_2eproto::scc_info_Point.base,}};

static void InitDefaultsLaneOrigin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_LaneOrigin_default_instance_;
    new (ptr) ::transform::proto::LaneOrigin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::LaneOrigin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneOrigin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneOrigin}, {}};

static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Lane_default_instance_;
    new (ptr) ::transform::proto::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLane}, {
      &protobuf_transform_2eproto::scc_info_Point.base,
      &protobuf_transform_2eproto::scc_info_LaneOrigin.base,
      &protobuf_transform_2eproto::scc_info_CaliInfo.base,}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Header_default_instance_;
    new (ptr) ::transform::proto::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_Frame_default_instance_;
    new (ptr) ::transform::proto::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_Frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsFrame}, {
      &protobuf_transform_2eproto::scc_info_Header.base,
      &protobuf_transform_2eproto::scc_info_Can.base,
      &protobuf_transform_2eproto::scc_info_Object.base,
      &protobuf_transform_2eproto::scc_info_Ped.base,
      &protobuf_transform_2eproto::scc_info_Lane.base,
      &protobuf_transform_2eproto::scc_info_Image.base,
      &protobuf_transform_2eproto::scc_info_CarCanInfo.base,
      &protobuf_transform_2eproto::scc_info_Rect.base,}};

static void InitDefaultsMultiFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transform::proto::_MultiFrame_default_instance_;
    new (ptr) ::transform::proto::MultiFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transform::proto::MultiFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MultiFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMultiFrame}, {
      &protobuf_transform_2eproto::scc_info_Frame.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ped_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point2i.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tire_Line_Rect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Size2f.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Image.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Can.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CarCanInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CaliInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Object.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ped.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneOrigin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiFrame.base);
}

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Point, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, conf1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, x1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, y1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, conf2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, x2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, y2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, conf3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, x3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, y3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, conf4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, x4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, y4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, conf5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, x5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, y5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, conf6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, x6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, y6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, conf7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, x7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped_Point, y7_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Point2i, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Point2i, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Point2i, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Rect, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Rect, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Rect, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Rect, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Tire_Line_Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Tire_Line_Rect, x1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Tire_Line_Rect, y1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Tire_Line_Rect, x2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Tire_Line_Rect, y2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Size2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Size2f, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Size2f, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Image, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Image, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Can, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Can, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Can, dlc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Can, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Can, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Can, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CarCanInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CarCanInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CarCanInfo, yawrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CarCanInfo, brake_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, fx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, fy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, cx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, cy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::CaliInfo, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, camera_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, subclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, subclass_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, detail_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, detail_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, detail_bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, viewpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, side_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, tire_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, life_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, relative_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, relative_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, ttc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, thw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, angle_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, angle_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, yaw_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Object, cipv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, conf2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, ppoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, relative_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, relative_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Ped, cipp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, tps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, f1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, f2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::LaneOrigin, ex_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, coordinate_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, line_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, line_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, distance_to_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, image_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, lane_origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, camera_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Lane, cali_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, hard_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, soft_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, image_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, car_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, tsintel_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, run_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Header, object_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, raw_can_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, ped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, cipv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, ldw_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, fcw_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, pcw_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, asw_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, bsd_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, lane_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, ttlc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, raw_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, car_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, lane_crop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, object_crop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, shutter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::Frame, source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::MultiFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transform::proto::MultiFrame, frame_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::transform::proto::Point)},
  { 8, -1, sizeof(::transform::proto::Ped_Point)},
  { 34, -1, sizeof(::transform::proto::Point2i)},
  { 41, -1, sizeof(::transform::proto::Rect)},
  { 50, -1, sizeof(::transform::proto::Tire_Line_Rect)},
  { 59, -1, sizeof(::transform::proto::Size2f)},
  { 66, -1, sizeof(::transform::proto::Image)},
  { 73, -1, sizeof(::transform::proto::Can)},
  { 83, -1, sizeof(::transform::proto::CarCanInfo)},
  { 91, -1, sizeof(::transform::proto::CaliInfo)},
  { 106, -1, sizeof(::transform::proto::Object)},
  { 140, -1, sizeof(::transform::proto::Ped)},
  { 155, -1, sizeof(::transform::proto::LaneOrigin)},
  { 169, -1, sizeof(::transform::proto::Lane)},
  { 192, -1, sizeof(::transform::proto::Header)},
  { 206, -1, sizeof(::transform::proto::Frame)},
  { 233, -1, sizeof(::transform::proto::MultiFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Ped_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Point2i_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Rect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Tire_Line_Rect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Size2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Can_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_CarCanInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_CaliInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Ped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_LaneOrigin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_Frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transform::proto::_MultiFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "transform.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017transform.proto\022\017transform.proto\"(\n\005Po"
      "int\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\234\002\n"
      "\tPed_Point\022\r\n\005conf1\030\001 \001(\001\022\n\n\002x1\030\002 \001(\003\022\n\n"
      "\002y1\030\003 \001(\003\022\r\n\005conf2\030\004 \001(\001\022\n\n\002x2\030\005 \001(\003\022\n\n\002"
      "y2\030\006 \001(\003\022\r\n\005conf3\030\007 \001(\001\022\n\n\002x3\030\010 \001(\003\022\n\n\002y"
      "3\030\t \001(\003\022\r\n\005conf4\030\n \001(\001\022\n\n\002x4\030\013 \001(\003\022\n\n\002y4"
      "\030\014 \001(\003\022\r\n\005conf5\030\r \001(\001\022\n\n\002x5\030\016 \001(\003\022\n\n\002y5\030"
      "\017 \001(\003\022\r\n\005conf6\030\020 \001(\001\022\n\n\002x6\030\021 \001(\003\022\n\n\002y6\030\022"
      " \001(\003\022\r\n\005conf7\030\023 \001(\001\022\n\n\002x7\030\024 \001(\003\022\n\n\002y7\030\025 "
      "\001(\003\"\037\n\007Point2i\022\t\n\001x\030\001 \001(\003\022\t\n\001y\030\002 \001(\003\";\n\004"
      "Rect\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\r\n\005width\030\003 \001("
      "\001\022\016\n\006height\030\004 \001(\001\"@\n\016Tire_Line_Rect\022\n\n\002x"
      "1\030\001 \001(\003\022\n\n\002y1\030\002 \001(\003\022\n\n\002x2\030\003 \001(\003\022\n\n\002y2\030\004 "
      "\001(\003\"\'\n\006Size2f\022\r\n\005width\030\001 \001(\001\022\016\n\006length\030\002"
      " \001(\001\"(\n\005Image\022\014\n\004data\030\001 \001(\014\022\021\n\ttimestamp"
      "\030\002 \001(\003\"P\n\003Can\022\n\n\002id\030\001 \001(\003\022\013\n\003dlc\030\002 \001(\003\022\014"
      "\n\004data\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\003\022\017\n\007chann"
      "el\030\005 \001(\005\";\n\nCarCanInfo\022\r\n\005speed\030\001 \001(\001\022\017\n"
      "\007yawrate\030\002 \001(\001\022\r\n\005brake\030\003 \001(\005\"\205\001\n\010CaliIn"
      "fo\022\n\n\002fx\030\001 \001(\001\022\n\n\002fy\030\002 \001(\001\022\n\n\002cx\030\003 \001(\001\022\n"
      "\n\002cy\030\004 \001(\001\022\r\n\005pitch\030\005 \001(\001\022\013\n\003yaw\030\006 \001(\001\022\014"
      "\n\004roll\030\007 \001(\001\022\t\n\001H\030\010 \001(\001\022\t\n\001X\030\t \001(\001\022\t\n\001Y\030"
      "\n \001(\001\"\236\007\n\006Object\022\023\n\013camera_type\030\001 \001(\003\022\n\n"
      "\002id\030\002 \001(\003\022\016\n\006class_\030\003 \001(\003\022\022\n\nclass_name\030"
      "\004 \001(\t\022\020\n\010subclass\030\005 \001(\003\022\025\n\rsubclass_name"
      "\030\006 \001(\t\022\022\n\nconfidence\030\007 \001(\001\022#\n\004bbox\030\010 \001(\013"
      "2\025.transform.proto.Rect\022\024\n\014detail_class\030"
      "\t \001(\003\022\023\n\013detail_conf\030\n \001(\001\022*\n\013detail_bbo"
      "x\030\013 \001(\0132\025.transform.proto.Rect\022\021\n\tviewpo"
      "int\030\014 \001(\003\022\022\n\nside_ratio\030\r \001(\003\0222\n\ttire_li"
      "ne\030\016 \001(\0132\037.transform.proto.Tire_Line_Rec"
      "t\022\021\n\tlife_time\030\017 \001(\003\022\021\n\ttimestamp\030\020 \001(\003\022"
      "\016\n\006height\030\021 \001(\001\022\r\n\005width\030\022 \001(\001\022\016\n\006length"
      "\030\023 \001(\001\022(\n\010distance\030\024 \001(\0132\026.transform.pro"
      "to.Point\0221\n\021relative_velocity\030\025 \001(\0132\026.tr"
      "ansform.proto.Point\0225\n\025relative_accelera"
      "tion\030\026 \001(\0132\026.transform.proto.Point\022\013\n\003tt"
      "c\030\027 \001(\001\022\013\n\003thw\030\030 \001(\001\022\022\n\nangle_left\030\031 \001(\001"
      "\022\023\n\013angle_right\030\032 \001(\001\022\021\n\tyaw_angle\030\033 \001(\001"
      "\022;\n\rmotion_status\030\034 \001(\0162$.transform.prot"
      "o.Object.MotionStatus\022\014\n\004cipv\030\035 \001(\003\"\260\001\n\014"
      "MotionStatus\022\031\n\025MOTION_STATUS_UNKNOWN\020\000\022"
      "\030\n\024MOTION_STATUS_PARKED\020\001\022\031\n\025MOTION_STAT"
      "US_STOPPED\020\002\022\030\n\024MOTION_STATUS_MOVING\020\003\022\032"
      "\n\026MOTION_STATUS_ONCOMING\020\004\022\032\n\026MOTION_STA"
      "TUS_CROSSING\020\005\"\267\002\n\003Ped\022\n\n\002id\030\002 \001(\003\022\016\n\006cl"
      "ass_\030\003 \001(\003\022\022\n\nconfidence\030\007 \001(\001\022#\n\004bbox\030\010"
      " \001(\0132\025.transform.proto.Rect\022\r\n\005conf2\030\t \001"
      "(\001\022*\n\006ppoint\030\n \001(\0132\032.transform.proto.Ped"
      "_Point\022(\n\010distance\030\013 \001(\0132\026.transform.pro"
      "to.Point\0221\n\021relative_velocity\030\014 \001(\0132\026.tr"
      "ansform.proto.Point\0225\n\025relative_accelera"
      "tion\030\r \001(\0132\026.transform.proto.Point\022\014\n\004ci"
      "pp\030\016 \001(\003\"|\n\nLaneOrigin\022\014\n\004conf\030\001 \001(\001\022\t\n\001"
      "x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\022\013\n\003tps\030\005 \001"
      "(\005\022\t\n\001k\030\006 \001(\001\022\n\n\002f1\030\007 \001(\001\022\n\n\002f2\030\010 \001(\001\022\017\n"
      "\007ex_data\030\n \003(\001\"\223\007\n\004Lane\022=\n\017coordinate_ty"
      "pe\030\001 \001(\0162$.transform.proto.Lane.Coordina"
      "teType\022\n\n\002C0\030\002 \001(\001\022\n\n\002C1\030\003 \001(\001\022\n\n\002C2\030\004 \001"
      "(\001\022\n\n\002C3\030\005 \001(\001\022\r\n\005index\030\006 \001(\003\022\017\n\007quality"
      "\030\007 \001(\003\0221\n\tline_type\030\010 \001(\0162\036.transform.pr"
      "oto.Lane.LineType\0223\n\nline_color\030\t \001(\0162\037."
      "transform.proto.Lane.LineColor\022%\n\005start\030"
      "\n \001(\0132\026.transform.proto.Point\022#\n\003end\030\013 \001"
      "(\0132\026.transform.proto.Point\022\030\n\020distance_t"
      "o_host\030\014 \001(\001\022,\n\014image_points\030\r \003(\0132\026.tra"
      "nsform.proto.Point\0220\n\013lane_origin\030\016 \003(\0132"
      "\033.transform.proto.LaneOrigin\022\r\n\005width\030\020 "
      "\001(\001\022\017\n\007line_id\030\021 \001(\003\022\024\n\014camera_index\030\022 \001"
      "(\003\022,\n\tcali_info\030\023 \001(\0132\031.transform.proto."
      "CaliInfo\"F\n\016CoordinateType\022\031\n\025COORDINATE"
      "_TYPE_IMAGE\020\000\022\031\n\025COORDINATE_TYPE_WORLD\020\001"
      "\"\230\001\n\010LineType\022\027\n\023LINE_TYPE_UNDECIDED\020\000\022\023"
      "\n\017LINE_TYPE_SOLID\020\001\022\024\n\020LINE_TYPE_DASHED\020"
      "\002\022\025\n\021LINE_TYPE_VIRTUAL\020\003\022\027\n\023LINE_TYPE_RO"
      "AD_EDGE\020\004\022\030\n\024LINE_TYPE_BOTTS_DOTS\020\005\"\206\001\n\t"
      "LineColor\022\026\n\022LINE_COLOR_UNKNOWN\020\000\022\024\n\020LIN"
      "E_COLOR_WHITE\020\001\022\025\n\021LINE_COLOR_YELLOW\020\002\022\031"
      "\n\025LINE_COLOR_BLUE_GREEN\020\003\022\031\n\025LINE_COLOR_"
      "ORANGE_RED\020\004\"\317\001\n\006Header\022\025\n\rserial_number"
      "\030\001 \001(\t\022\030\n\020protocol_version\030\002 \001(\t\022\024\n\014hard"
      "_version\030\003 \001(\t\022\024\n\014soft_version\030\004 \001(\t\022\024\n\014"
      "image_format\030\005 \001(\003\022\020\n\010car_type\030\006 \001(\t\022\026\n\016"
      "tsintel_config\030\007 \001(\014\022\020\n\010run_mode\030\010 \001(\t\022\026"
      "\n\016object_version\030\t \001(\t\"\222\005\n\005Frame\022\'\n\006head"
      "er\030\001 \001(\0132\027.transform.proto.Header\022\n\n\002id\030"
      "\002 \001(\003\022%\n\007raw_can\030\003 \003(\0132\024.transform.proto"
      ".Can\022\'\n\006object\030\004 \003(\0132\027.transform.proto.O"
      "bject\022!\n\003ped\030\005 \003(\0132\024.transform.proto.Ped"
      "\022#\n\004lane\030\006 \003(\0132\025.transform.proto.Lane\022\017\n"
      "\007cipv_id\030\007 \001(\003\022\022\n\nldw_status\030\010 \001(\003\022\022\n\nfc"
      "w_status\030\t \001(\003\022\022\n\npcw_status\030\n \001(\003\022\022\n\nas"
      "w_status\030\013 \001(\003\022\022\n\nbsd_status\030\014 \001(\003\022\023\n\013la"
      "ne_number\030\r \001(\003\022\014\n\004ttlc\030\016 \001(\001\022\021\n\ttimesta"
      "mp\030\017 \001(\003\022)\n\traw_image\030\020 \001(\0132\026.transform."
      "proto.Image\022-\n\010car_info\030\021 \001(\0132\033.transfor"
      "m.proto.CarCanInfo\022(\n\tlane_crop\030\022 \001(\0132\025."
      "transform.proto.Rect\022*\n\013object_crop\030\023 \001("
      "\0132\025.transform.proto.Rect\022\017\n\007shutter\030\024 \001("
      "\003\022\'\n\006region\030\025 \001(\0162\027.transform.proto.Regi"
      "on\022\'\n\006source\030\026 \001(\0162\027.transform.proto.Sou"
      "rce\"3\n\nMultiFrame\022%\n\005frame\030\001 \003(\0132\026.trans"
      "form.proto.Frame*#\n\006Region\022\010\n\004FULL\020\000\022\017\n\013"
      "INTERESTING\020\001*\036\n\006Source\022\n\n\006ORIGIN\020\000\022\010\n\004P"
      "ROC\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transform.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_transform_2eproto
namespace transform {
namespace proto {
const ::google::protobuf::EnumDescriptor* Object_MotionStatus_descriptor() {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transform_2eproto::file_level_enum_descriptors[0];
}
bool Object_MotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_MotionStatus Object::MOTION_STATUS_UNKNOWN;
const Object_MotionStatus Object::MOTION_STATUS_PARKED;
const Object_MotionStatus Object::MOTION_STATUS_STOPPED;
const Object_MotionStatus Object::MOTION_STATUS_MOVING;
const Object_MotionStatus Object::MOTION_STATUS_ONCOMING;
const Object_MotionStatus Object::MOTION_STATUS_CROSSING;
const Object_MotionStatus Object::MotionStatus_MIN;
const Object_MotionStatus Object::MotionStatus_MAX;
const int Object::MotionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_CoordinateType_descriptor() {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transform_2eproto::file_level_enum_descriptors[1];
}
bool Lane_CoordinateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_CoordinateType Lane::COORDINATE_TYPE_IMAGE;
const Lane_CoordinateType Lane::COORDINATE_TYPE_WORLD;
const Lane_CoordinateType Lane::CoordinateType_MIN;
const Lane_CoordinateType Lane::CoordinateType_MAX;
const int Lane::CoordinateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LineType_descriptor() {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transform_2eproto::file_level_enum_descriptors[2];
}
bool Lane_LineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LineType Lane::LINE_TYPE_UNDECIDED;
const Lane_LineType Lane::LINE_TYPE_SOLID;
const Lane_LineType Lane::LINE_TYPE_DASHED;
const Lane_LineType Lane::LINE_TYPE_VIRTUAL;
const Lane_LineType Lane::LINE_TYPE_ROAD_EDGE;
const Lane_LineType Lane::LINE_TYPE_BOTTS_DOTS;
const Lane_LineType Lane::LineType_MIN;
const Lane_LineType Lane::LineType_MAX;
const int Lane::LineType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LineColor_descriptor() {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transform_2eproto::file_level_enum_descriptors[3];
}
bool Lane_LineColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LineColor Lane::LINE_COLOR_UNKNOWN;
const Lane_LineColor Lane::LINE_COLOR_WHITE;
const Lane_LineColor Lane::LINE_COLOR_YELLOW;
const Lane_LineColor Lane::LINE_COLOR_BLUE_GREEN;
const Lane_LineColor Lane::LINE_COLOR_ORANGE_RED;
const Lane_LineColor Lane::LineColor_MIN;
const Lane_LineColor Lane::LineColor_MAX;
const int Lane::LineColor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Region_descriptor() {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transform_2eproto::file_level_enum_descriptors[4];
}
bool Region_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Source_descriptor() {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transform_2eproto::file_level_enum_descriptors[5];
}
bool Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:transform.proto.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ped_Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ped_Point::kConf1FieldNumber;
const int Ped_Point::kX1FieldNumber;
const int Ped_Point::kY1FieldNumber;
const int Ped_Point::kConf2FieldNumber;
const int Ped_Point::kX2FieldNumber;
const int Ped_Point::kY2FieldNumber;
const int Ped_Point::kConf3FieldNumber;
const int Ped_Point::kX3FieldNumber;
const int Ped_Point::kY3FieldNumber;
const int Ped_Point::kConf4FieldNumber;
const int Ped_Point::kX4FieldNumber;
const int Ped_Point::kY4FieldNumber;
const int Ped_Point::kConf5FieldNumber;
const int Ped_Point::kX5FieldNumber;
const int Ped_Point::kY5FieldNumber;
const int Ped_Point::kConf6FieldNumber;
const int Ped_Point::kX6FieldNumber;
const int Ped_Point::kY6FieldNumber;
const int Ped_Point::kConf7FieldNumber;
const int Ped_Point::kX7FieldNumber;
const int Ped_Point::kY7FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ped_Point::Ped_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Ped_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Ped_Point)
}
Ped_Point::Ped_Point(const Ped_Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&conf1_, &from.conf1_,
    static_cast<size_t>(reinterpret_cast<char*>(&y7_) -
    reinterpret_cast<char*>(&conf1_)) + sizeof(y7_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Ped_Point)
}

void Ped_Point::SharedCtor() {
  ::memset(&conf1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y7_) -
      reinterpret_cast<char*>(&conf1_)) + sizeof(y7_));
}

Ped_Point::~Ped_Point() {
  // @@protoc_insertion_point(destructor:transform.proto.Ped_Point)
  SharedDtor();
}

void Ped_Point::SharedDtor() {
}

void Ped_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ped_Point::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ped_Point& Ped_Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Ped_Point.base);
  return *internal_default_instance();
}


void Ped_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Ped_Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&conf1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y7_) -
      reinterpret_cast<char*>(&conf1_)) + sizeof(y7_));
  _internal_metadata_.Clear();
}

bool Ped_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Ped_Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double conf1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conf2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conf3 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x3 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conf4 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x4 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y4 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conf5 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x5 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y5 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conf6 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x6 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y6 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conf7 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x7 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y7 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Ped_Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Ped_Point)
  return false;
#undef DO_
}

void Ped_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Ped_Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double conf1 = 1;
  if (this->conf1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->conf1(), output);
  }

  // int64 x1 = 2;
  if (this->x1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->x1(), output);
  }

  // int64 y1 = 3;
  if (this->y1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->y1(), output);
  }

  // double conf2 = 4;
  if (this->conf2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->conf2(), output);
  }

  // int64 x2 = 5;
  if (this->x2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->x2(), output);
  }

  // int64 y2 = 6;
  if (this->y2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->y2(), output);
  }

  // double conf3 = 7;
  if (this->conf3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->conf3(), output);
  }

  // int64 x3 = 8;
  if (this->x3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->x3(), output);
  }

  // int64 y3 = 9;
  if (this->y3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->y3(), output);
  }

  // double conf4 = 10;
  if (this->conf4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->conf4(), output);
  }

  // int64 x4 = 11;
  if (this->x4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->x4(), output);
  }

  // int64 y4 = 12;
  if (this->y4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->y4(), output);
  }

  // double conf5 = 13;
  if (this->conf5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->conf5(), output);
  }

  // int64 x5 = 14;
  if (this->x5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->x5(), output);
  }

  // int64 y5 = 15;
  if (this->y5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->y5(), output);
  }

  // double conf6 = 16;
  if (this->conf6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->conf6(), output);
  }

  // int64 x6 = 17;
  if (this->x6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->x6(), output);
  }

  // int64 y6 = 18;
  if (this->y6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->y6(), output);
  }

  // double conf7 = 19;
  if (this->conf7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->conf7(), output);
  }

  // int64 x7 = 20;
  if (this->x7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->x7(), output);
  }

  // int64 y7 = 21;
  if (this->y7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->y7(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Ped_Point)
}

::google::protobuf::uint8* Ped_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Ped_Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double conf1 = 1;
  if (this->conf1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->conf1(), target);
  }

  // int64 x1 = 2;
  if (this->x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->x1(), target);
  }

  // int64 y1 = 3;
  if (this->y1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->y1(), target);
  }

  // double conf2 = 4;
  if (this->conf2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->conf2(), target);
  }

  // int64 x2 = 5;
  if (this->x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->x2(), target);
  }

  // int64 y2 = 6;
  if (this->y2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->y2(), target);
  }

  // double conf3 = 7;
  if (this->conf3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->conf3(), target);
  }

  // int64 x3 = 8;
  if (this->x3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->x3(), target);
  }

  // int64 y3 = 9;
  if (this->y3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->y3(), target);
  }

  // double conf4 = 10;
  if (this->conf4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->conf4(), target);
  }

  // int64 x4 = 11;
  if (this->x4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->x4(), target);
  }

  // int64 y4 = 12;
  if (this->y4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->y4(), target);
  }

  // double conf5 = 13;
  if (this->conf5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->conf5(), target);
  }

  // int64 x5 = 14;
  if (this->x5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->x5(), target);
  }

  // int64 y5 = 15;
  if (this->y5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->y5(), target);
  }

  // double conf6 = 16;
  if (this->conf6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->conf6(), target);
  }

  // int64 x6 = 17;
  if (this->x6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->x6(), target);
  }

  // int64 y6 = 18;
  if (this->y6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->y6(), target);
  }

  // double conf7 = 19;
  if (this->conf7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->conf7(), target);
  }

  // int64 x7 = 20;
  if (this->x7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->x7(), target);
  }

  // int64 y7 = 21;
  if (this->y7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->y7(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Ped_Point)
  return target;
}

size_t Ped_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Ped_Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double conf1 = 1;
  if (this->conf1() != 0) {
    total_size += 1 + 8;
  }

  // int64 x1 = 2;
  if (this->x1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x1());
  }

  // int64 y1 = 3;
  if (this->y1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y1());
  }

  // double conf2 = 4;
  if (this->conf2() != 0) {
    total_size += 1 + 8;
  }

  // int64 x2 = 5;
  if (this->x2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x2());
  }

  // int64 y2 = 6;
  if (this->y2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y2());
  }

  // double conf3 = 7;
  if (this->conf3() != 0) {
    total_size += 1 + 8;
  }

  // int64 x3 = 8;
  if (this->x3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x3());
  }

  // int64 y3 = 9;
  if (this->y3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y3());
  }

  // double conf4 = 10;
  if (this->conf4() != 0) {
    total_size += 1 + 8;
  }

  // int64 x4 = 11;
  if (this->x4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x4());
  }

  // int64 y4 = 12;
  if (this->y4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y4());
  }

  // double conf5 = 13;
  if (this->conf5() != 0) {
    total_size += 1 + 8;
  }

  // int64 x5 = 14;
  if (this->x5() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x5());
  }

  // int64 y5 = 15;
  if (this->y5() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y5());
  }

  // double conf6 = 16;
  if (this->conf6() != 0) {
    total_size += 2 + 8;
  }

  // int64 x6 = 17;
  if (this->x6() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x6());
  }

  // int64 y6 = 18;
  if (this->y6() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y6());
  }

  // double conf7 = 19;
  if (this->conf7() != 0) {
    total_size += 2 + 8;
  }

  // int64 x7 = 20;
  if (this->x7() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x7());
  }

  // int64 y7 = 21;
  if (this->y7() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y7());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ped_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Ped_Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Ped_Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ped_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Ped_Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Ped_Point)
    MergeFrom(*source);
  }
}

void Ped_Point::MergeFrom(const Ped_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Ped_Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.conf1() != 0) {
    set_conf1(from.conf1());
  }
  if (from.x1() != 0) {
    set_x1(from.x1());
  }
  if (from.y1() != 0) {
    set_y1(from.y1());
  }
  if (from.conf2() != 0) {
    set_conf2(from.conf2());
  }
  if (from.x2() != 0) {
    set_x2(from.x2());
  }
  if (from.y2() != 0) {
    set_y2(from.y2());
  }
  if (from.conf3() != 0) {
    set_conf3(from.conf3());
  }
  if (from.x3() != 0) {
    set_x3(from.x3());
  }
  if (from.y3() != 0) {
    set_y3(from.y3());
  }
  if (from.conf4() != 0) {
    set_conf4(from.conf4());
  }
  if (from.x4() != 0) {
    set_x4(from.x4());
  }
  if (from.y4() != 0) {
    set_y4(from.y4());
  }
  if (from.conf5() != 0) {
    set_conf5(from.conf5());
  }
  if (from.x5() != 0) {
    set_x5(from.x5());
  }
  if (from.y5() != 0) {
    set_y5(from.y5());
  }
  if (from.conf6() != 0) {
    set_conf6(from.conf6());
  }
  if (from.x6() != 0) {
    set_x6(from.x6());
  }
  if (from.y6() != 0) {
    set_y6(from.y6());
  }
  if (from.conf7() != 0) {
    set_conf7(from.conf7());
  }
  if (from.x7() != 0) {
    set_x7(from.x7());
  }
  if (from.y7() != 0) {
    set_y7(from.y7());
  }
}

void Ped_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Ped_Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ped_Point::CopyFrom(const Ped_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Ped_Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ped_Point::IsInitialized() const {
  return true;
}

void Ped_Point::Swap(Ped_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ped_Point::InternalSwap(Ped_Point* other) {
  using std::swap;
  swap(conf1_, other->conf1_);
  swap(x1_, other->x1_);
  swap(y1_, other->y1_);
  swap(conf2_, other->conf2_);
  swap(x2_, other->x2_);
  swap(y2_, other->y2_);
  swap(conf3_, other->conf3_);
  swap(x3_, other->x3_);
  swap(y3_, other->y3_);
  swap(conf4_, other->conf4_);
  swap(x4_, other->x4_);
  swap(y4_, other->y4_);
  swap(conf5_, other->conf5_);
  swap(x5_, other->x5_);
  swap(y5_, other->y5_);
  swap(conf6_, other->conf6_);
  swap(x6_, other->x6_);
  swap(y6_, other->y6_);
  swap(conf7_, other->conf7_);
  swap(x7_, other->x7_);
  swap(y7_, other->y7_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ped_Point::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point2i::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2i::kXFieldNumber;
const int Point2i::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2i::Point2i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Point2i.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Point2i)
}
Point2i::Point2i(const Point2i& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Point2i)
}

void Point2i::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2i::~Point2i() {
  // @@protoc_insertion_point(destructor:transform.proto.Point2i)
  SharedDtor();
}

void Point2i::SharedDtor() {
}

void Point2i::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point2i::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point2i& Point2i::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Point2i.base);
  return *internal_default_instance();
}


void Point2i::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Point2i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Point2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Point2i)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Point2i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Point2i)
  return false;
#undef DO_
}

void Point2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Point2i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->x(), output);
  }

  // int64 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Point2i)
}

::google::protobuf::uint8* Point2i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Point2i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->x(), target);
  }

  // int64 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Point2i)
  return target;
}

size_t Point2i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Point2i)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x());
  }

  // int64 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Point2i)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Point2i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Point2i)
    MergeFrom(*source);
  }
}

void Point2i::MergeFrom(const Point2i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Point2i)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point2i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Point2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2i::CopyFrom(const Point2i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Point2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2i::IsInitialized() const {
  return true;
}

void Point2i::Swap(Point2i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2i::InternalSwap(Point2i* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point2i::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Rect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:transform.proto.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rect& Rect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Rect.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Rect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // double height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // double height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Rect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double width = 3;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 4;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tire_Line_Rect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tire_Line_Rect::kX1FieldNumber;
const int Tire_Line_Rect::kY1FieldNumber;
const int Tire_Line_Rect::kX2FieldNumber;
const int Tire_Line_Rect::kY2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tire_Line_Rect::Tire_Line_Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Tire_Line_Rect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Tire_Line_Rect)
}
Tire_Line_Rect::Tire_Line_Rect(const Tire_Line_Rect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&y2_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Tire_Line_Rect)
}

void Tire_Line_Rect::SharedCtor() {
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y2_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
}

Tire_Line_Rect::~Tire_Line_Rect() {
  // @@protoc_insertion_point(destructor:transform.proto.Tire_Line_Rect)
  SharedDtor();
}

void Tire_Line_Rect::SharedDtor() {
}

void Tire_Line_Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tire_Line_Rect::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tire_Line_Rect& Tire_Line_Rect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Tire_Line_Rect.base);
  return *internal_default_instance();
}


void Tire_Line_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Tire_Line_Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y2_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(y2_));
  _internal_metadata_.Clear();
}

bool Tire_Line_Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Tire_Line_Rect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 x1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 x2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &x2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 y2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &y2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Tire_Line_Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Tire_Line_Rect)
  return false;
#undef DO_
}

void Tire_Line_Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Tire_Line_Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x1 = 1;
  if (this->x1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->x1(), output);
  }

  // int64 y1 = 2;
  if (this->y1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->y1(), output);
  }

  // int64 x2 = 3;
  if (this->x2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->x2(), output);
  }

  // int64 y2 = 4;
  if (this->y2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->y2(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Tire_Line_Rect)
}

::google::protobuf::uint8* Tire_Line_Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Tire_Line_Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 x1 = 1;
  if (this->x1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->x1(), target);
  }

  // int64 y1 = 2;
  if (this->y1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->y1(), target);
  }

  // int64 x2 = 3;
  if (this->x2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->x2(), target);
  }

  // int64 y2 = 4;
  if (this->y2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->y2(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Tire_Line_Rect)
  return target;
}

size_t Tire_Line_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Tire_Line_Rect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 x1 = 1;
  if (this->x1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x1());
  }

  // int64 y1 = 2;
  if (this->y1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y1());
  }

  // int64 x2 = 3;
  if (this->x2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->x2());
  }

  // int64 y2 = 4;
  if (this->y2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->y2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tire_Line_Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Tire_Line_Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Tire_Line_Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tire_Line_Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Tire_Line_Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Tire_Line_Rect)
    MergeFrom(*source);
  }
}

void Tire_Line_Rect::MergeFrom(const Tire_Line_Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Tire_Line_Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x1() != 0) {
    set_x1(from.x1());
  }
  if (from.y1() != 0) {
    set_y1(from.y1());
  }
  if (from.x2() != 0) {
    set_x2(from.x2());
  }
  if (from.y2() != 0) {
    set_y2(from.y2());
  }
}

void Tire_Line_Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Tire_Line_Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tire_Line_Rect::CopyFrom(const Tire_Line_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Tire_Line_Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tire_Line_Rect::IsInitialized() const {
  return true;
}

void Tire_Line_Rect::Swap(Tire_Line_Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tire_Line_Rect::InternalSwap(Tire_Line_Rect* other) {
  using std::swap;
  swap(x1_, other->x1_);
  swap(y1_, other->y1_);
  swap(x2_, other->x2_);
  swap(y2_, other->y2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tire_Line_Rect::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Size2f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size2f::kWidthFieldNumber;
const int Size2f::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size2f::Size2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Size2f.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Size2f)
}
Size2f::Size2f(const Size2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&width_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Size2f)
}

void Size2f::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&width_)) + sizeof(length_));
}

Size2f::~Size2f() {
  // @@protoc_insertion_point(destructor:transform.proto.Size2f)
  SharedDtor();
}

void Size2f::SharedDtor() {
}

void Size2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Size2f::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Size2f& Size2f::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Size2f.base);
  return *internal_default_instance();
}


void Size2f::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Size2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&width_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool Size2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Size2f)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Size2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Size2f)
  return false;
#undef DO_
}

void Size2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Size2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // double length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Size2f)
}

::google::protobuf::uint8* Size2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Size2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->width(), target);
  }

  // double length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Size2f)
  return target;
}

size_t Size2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Size2f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double width = 1;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double length = 2;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Size2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Size2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Size2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Size2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Size2f)
    MergeFrom(*source);
  }
}

void Size2f::MergeFrom(const Size2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Size2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void Size2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Size2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size2f::CopyFrom(const Size2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Size2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size2f::IsInitialized() const {
  return true;
}

void Size2f::Swap(Size2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size2f::InternalSwap(Size2f* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Size2f::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Image::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kDataFieldNumber;
const int Image::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Image.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:transform.proto.Image)
}

void Image::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:transform.proto.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Image.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Image)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Image)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Can::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Can::kIdFieldNumber;
const int Can::kDlcFieldNumber;
const int Can::kDataFieldNumber;
const int Can::kTimestampFieldNumber;
const int Can::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Can::Can()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Can.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Can)
}
Can::Can(const Can& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Can)
}

void Can::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_));
}

Can::~Can() {
  // @@protoc_insertion_point(destructor:transform.proto.Can)
  SharedDtor();
}

void Can::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Can::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Can::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Can& Can::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Can.base);
  return *internal_default_instance();
}


void Can::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Can)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool Can::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Can)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 dlc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dlc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Can)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Can)
  return false;
#undef DO_
}

void Can::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Can)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // int64 dlc = 2;
  if (this->dlc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dlc(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // int32 channel = 5;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Can)
}

::google::protobuf::uint8* Can::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Can)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // int64 dlc = 2;
  if (this->dlc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dlc(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // int32 channel = 5;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Can)
  return target;
}

size_t Can::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Can)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 dlc = 2;
  if (this->dlc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dlc());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 channel = 5;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Can::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Can)
  GOOGLE_DCHECK_NE(&from, this);
  const Can* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Can>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Can)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Can)
    MergeFrom(*source);
  }
}

void Can::MergeFrom(const Can& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Can)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.dlc() != 0) {
    set_dlc(from.dlc());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void Can::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Can)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Can::CopyFrom(const Can& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Can)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Can::IsInitialized() const {
  return true;
}

void Can::Swap(Can* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Can::InternalSwap(Can* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(dlc_, other->dlc_);
  swap(timestamp_, other->timestamp_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Can::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CarCanInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CarCanInfo::kSpeedFieldNumber;
const int CarCanInfo::kYawrateFieldNumber;
const int CarCanInfo::kBrakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CarCanInfo::CarCanInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_CarCanInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.CarCanInfo)
}
CarCanInfo::CarCanInfo(const CarCanInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(brake_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.CarCanInfo)
}

void CarCanInfo::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(brake_));
}

CarCanInfo::~CarCanInfo() {
  // @@protoc_insertion_point(destructor:transform.proto.CarCanInfo)
  SharedDtor();
}

void CarCanInfo::SharedDtor() {
}

void CarCanInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CarCanInfo::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CarCanInfo& CarCanInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_CarCanInfo.base);
  return *internal_default_instance();
}


void CarCanInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.CarCanInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(brake_));
  _internal_metadata_.Clear();
}

bool CarCanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.CarCanInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yawrate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brake = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.CarCanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.CarCanInfo)
  return false;
#undef DO_
}

void CarCanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.CarCanInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  // double yawrate = 2;
  if (this->yawrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->yawrate(), output);
  }

  // int32 brake = 3;
  if (this->brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->brake(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.CarCanInfo)
}

::google::protobuf::uint8* CarCanInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.CarCanInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  // double yawrate = 2;
  if (this->yawrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->yawrate(), target);
  }

  // int32 brake = 3;
  if (this->brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->brake(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.CarCanInfo)
  return target;
}

size_t CarCanInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.CarCanInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double speed = 1;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // double yawrate = 2;
  if (this->yawrate() != 0) {
    total_size += 1 + 8;
  }

  // int32 brake = 3;
  if (this->brake() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarCanInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.CarCanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CarCanInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CarCanInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.CarCanInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.CarCanInfo)
    MergeFrom(*source);
  }
}

void CarCanInfo::MergeFrom(const CarCanInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.CarCanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.yawrate() != 0) {
    set_yawrate(from.yawrate());
  }
  if (from.brake() != 0) {
    set_brake(from.brake());
  }
}

void CarCanInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.CarCanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarCanInfo::CopyFrom(const CarCanInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.CarCanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarCanInfo::IsInitialized() const {
  return true;
}

void CarCanInfo::Swap(CarCanInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CarCanInfo::InternalSwap(CarCanInfo* other) {
  using std::swap;
  swap(speed_, other->speed_);
  swap(yawrate_, other->yawrate_);
  swap(brake_, other->brake_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CarCanInfo::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CaliInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaliInfo::kFxFieldNumber;
const int CaliInfo::kFyFieldNumber;
const int CaliInfo::kCxFieldNumber;
const int CaliInfo::kCyFieldNumber;
const int CaliInfo::kPitchFieldNumber;
const int CaliInfo::kYawFieldNumber;
const int CaliInfo::kRollFieldNumber;
const int CaliInfo::kHFieldNumber;
const int CaliInfo::kXFieldNumber;
const int CaliInfo::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaliInfo::CaliInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_CaliInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.CaliInfo)
}
CaliInfo::CaliInfo(const CaliInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.CaliInfo)
}

void CaliInfo::SharedCtor() {
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(y_));
}

CaliInfo::~CaliInfo() {
  // @@protoc_insertion_point(destructor:transform.proto.CaliInfo)
  SharedDtor();
}

void CaliInfo::SharedDtor() {
}

void CaliInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CaliInfo::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CaliInfo& CaliInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_CaliInfo.base);
  return *internal_default_instance();
}


void CaliInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.CaliInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool CaliInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.CaliInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double fx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double H = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double X = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.CaliInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.CaliInfo)
  return false;
#undef DO_
}

void CaliInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.CaliInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double fx = 1;
  if (this->fx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->fx(), output);
  }

  // double fy = 2;
  if (this->fy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fy(), output);
  }

  // double cx = 3;
  if (this->cx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cx(), output);
  }

  // double cy = 4;
  if (this->cy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cy(), output);
  }

  // double pitch = 5;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pitch(), output);
  }

  // double yaw = 6;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->yaw(), output);
  }

  // double roll = 7;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->roll(), output);
  }

  // double H = 8;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->h(), output);
  }

  // double X = 9;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->x(), output);
  }

  // double Y = 10;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.CaliInfo)
}

::google::protobuf::uint8* CaliInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.CaliInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double fx = 1;
  if (this->fx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->fx(), target);
  }

  // double fy = 2;
  if (this->fy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fy(), target);
  }

  // double cx = 3;
  if (this->cx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cx(), target);
  }

  // double cy = 4;
  if (this->cy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cy(), target);
  }

  // double pitch = 5;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pitch(), target);
  }

  // double yaw = 6;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->yaw(), target);
  }

  // double roll = 7;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->roll(), target);
  }

  // double H = 8;
  if (this->h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->h(), target);
  }

  // double X = 9;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->x(), target);
  }

  // double Y = 10;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.CaliInfo)
  return target;
}

size_t CaliInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.CaliInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double fx = 1;
  if (this->fx() != 0) {
    total_size += 1 + 8;
  }

  // double fy = 2;
  if (this->fy() != 0) {
    total_size += 1 + 8;
  }

  // double cx = 3;
  if (this->cx() != 0) {
    total_size += 1 + 8;
  }

  // double cy = 4;
  if (this->cy() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 5;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 6;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  // double roll = 7;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  // double H = 8;
  if (this->h() != 0) {
    total_size += 1 + 8;
  }

  // double X = 9;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double Y = 10;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaliInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.CaliInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CaliInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CaliInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.CaliInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.CaliInfo)
    MergeFrom(*source);
  }
}

void CaliInfo::MergeFrom(const CaliInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.CaliInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fx() != 0) {
    set_fx(from.fx());
  }
  if (from.fy() != 0) {
    set_fy(from.fy());
  }
  if (from.cx() != 0) {
    set_cx(from.cx());
  }
  if (from.cy() != 0) {
    set_cy(from.cy());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void CaliInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.CaliInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaliInfo::CopyFrom(const CaliInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.CaliInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaliInfo::IsInitialized() const {
  return true;
}

void CaliInfo::Swap(CaliInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaliInfo::InternalSwap(CaliInfo* other) {
  using std::swap;
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
  swap(cx_, other->cx_);
  swap(cy_, other->cy_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  swap(h_, other->h_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CaliInfo::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::transform::proto::_Object_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::transform::proto::Rect*>(
      ::transform::proto::Rect::internal_default_instance());
  ::transform::proto::_Object_default_instance_._instance.get_mutable()->detail_bbox_ = const_cast< ::transform::proto::Rect*>(
      ::transform::proto::Rect::internal_default_instance());
  ::transform::proto::_Object_default_instance_._instance.get_mutable()->tire_line_ = const_cast< ::transform::proto::Tire_Line_Rect*>(
      ::transform::proto::Tire_Line_Rect::internal_default_instance());
  ::transform::proto::_Object_default_instance_._instance.get_mutable()->distance_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
  ::transform::proto::_Object_default_instance_._instance.get_mutable()->relative_velocity_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
  ::transform::proto::_Object_default_instance_._instance.get_mutable()->relative_acceleration_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kCameraTypeFieldNumber;
const int Object::kIdFieldNumber;
const int Object::kClassFieldNumber;
const int Object::kClassNameFieldNumber;
const int Object::kSubclassFieldNumber;
const int Object::kSubclassNameFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kBboxFieldNumber;
const int Object::kDetailClassFieldNumber;
const int Object::kDetailConfFieldNumber;
const int Object::kDetailBboxFieldNumber;
const int Object::kViewpointFieldNumber;
const int Object::kSideRatioFieldNumber;
const int Object::kTireLineFieldNumber;
const int Object::kLifeTimeFieldNumber;
const int Object::kTimestampFieldNumber;
const int Object::kHeightFieldNumber;
const int Object::kWidthFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kDistanceFieldNumber;
const int Object::kRelativeVelocityFieldNumber;
const int Object::kRelativeAccelerationFieldNumber;
const int Object::kTtcFieldNumber;
const int Object::kThwFieldNumber;
const int Object::kAngleLeftFieldNumber;
const int Object::kAngleRightFieldNumber;
const int Object::kYawAngleFieldNumber;
const int Object::kMotionStatusFieldNumber;
const int Object::kCipvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Object.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subclass_name().size() > 0) {
    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::transform::proto::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  if (from.has_detail_bbox()) {
    detail_bbox_ = new ::transform::proto::Rect(*from.detail_bbox_);
  } else {
    detail_bbox_ = NULL;
  }
  if (from.has_tire_line()) {
    tire_line_ = new ::transform::proto::Tire_Line_Rect(*from.tire_line_);
  } else {
    tire_line_ = NULL;
  }
  if (from.has_distance()) {
    distance_ = new ::transform::proto::Point(*from.distance_);
  } else {
    distance_ = NULL;
  }
  if (from.has_relative_velocity()) {
    relative_velocity_ = new ::transform::proto::Point(*from.relative_velocity_);
  } else {
    relative_velocity_ = NULL;
  }
  if (from.has_relative_acceleration()) {
    relative_acceleration_ = new ::transform::proto::Point(*from.relative_acceleration_);
  } else {
    relative_acceleration_ = NULL;
  }
  ::memcpy(&camera_type_, &from.camera_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&motion_status_) -
    reinterpret_cast<char*>(&camera_type_)) + sizeof(motion_status_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Object)
}

void Object::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motion_status_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(motion_status_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:transform.proto.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete detail_bbox_;
  if (this != internal_default_instance()) delete tire_line_;
  if (this != internal_default_instance()) delete distance_;
  if (this != internal_default_instance()) delete relative_velocity_;
  if (this != internal_default_instance()) delete relative_acceleration_;
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Object.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && detail_bbox_ != NULL) {
    delete detail_bbox_;
  }
  detail_bbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && tire_line_ != NULL) {
    delete tire_line_;
  }
  tire_line_ = NULL;
  if (GetArenaNoVirtual() == NULL && distance_ != NULL) {
    delete distance_;
  }
  distance_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL) {
    delete relative_velocity_;
  }
  relative_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL) {
    delete relative_acceleration_;
  }
  relative_acceleration_ = NULL;
  ::memset(&camera_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motion_status_) -
      reinterpret_cast<char*>(&camera_type_)) + sizeof(motion_status_));
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 camera_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &camera_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Object.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subclass = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subclass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subclass_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subclass_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Object.subclass_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Rect bbox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 detail_class = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detail_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double detail_conf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &detail_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Rect detail_bbox = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detail_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 viewpoint = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viewpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 side_ratio = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &side_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Tire_Line_Rect tire_line = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tire_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 life_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point distance = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point relative_velocity = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point relative_acceleration = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ttc = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double thw = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle_left = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle_right = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_angle = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Object.MotionStatus motion_status = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_status(static_cast< ::transform::proto::Object_MotionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cipv = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cipv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 camera_type = 1;
  if (this->camera_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->camera_type(), output);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // int64 class_ = 3;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->class_(), output);
  }

  // string class_name = 4;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Object.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->class_name(), output);
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->subclass(), output);
  }

  // string subclass_name = 6;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Object.subclass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subclass_name(), output);
  }

  // double confidence = 7;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->confidence(), output);
  }

  // .transform.proto.Rect bbox = 8;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_bbox(), output);
  }

  // int64 detail_class = 9;
  if (this->detail_class() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->detail_class(), output);
  }

  // double detail_conf = 10;
  if (this->detail_conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->detail_conf(), output);
  }

  // .transform.proto.Rect detail_bbox = 11;
  if (this->has_detail_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_detail_bbox(), output);
  }

  // int64 viewpoint = 12;
  if (this->viewpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->viewpoint(), output);
  }

  // int64 side_ratio = 13;
  if (this->side_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->side_ratio(), output);
  }

  // .transform.proto.Tire_Line_Rect tire_line = 14;
  if (this->has_tire_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_tire_line(), output);
  }

  // int64 life_time = 15;
  if (this->life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->life_time(), output);
  }

  // int64 timestamp = 16;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->timestamp(), output);
  }

  // double height = 17;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->height(), output);
  }

  // double width = 18;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->width(), output);
  }

  // double length = 19;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->length(), output);
  }

  // .transform.proto.Point distance = 20;
  if (this->has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_distance(), output);
  }

  // .transform.proto.Point relative_velocity = 21;
  if (this->has_relative_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_relative_velocity(), output);
  }

  // .transform.proto.Point relative_acceleration = 22;
  if (this->has_relative_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_relative_acceleration(), output);
  }

  // double ttc = 23;
  if (this->ttc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->ttc(), output);
  }

  // double thw = 24;
  if (this->thw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->thw(), output);
  }

  // double angle_left = 25;
  if (this->angle_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->angle_left(), output);
  }

  // double angle_right = 26;
  if (this->angle_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->angle_right(), output);
  }

  // double yaw_angle = 27;
  if (this->yaw_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->yaw_angle(), output);
  }

  // .transform.proto.Object.MotionStatus motion_status = 28;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->motion_status(), output);
  }

  // int64 cipv = 29;
  if (this->cipv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->cipv(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 camera_type = 1;
  if (this->camera_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->camera_type(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // int64 class_ = 3;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->class_(), target);
  }

  // string class_name = 4;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Object.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_name(), target);
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->subclass(), target);
  }

  // string subclass_name = 6;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Object.subclass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subclass_name(), target);
  }

  // double confidence = 7;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->confidence(), target);
  }

  // .transform.proto.Rect bbox = 8;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_bbox(), deterministic, target);
  }

  // int64 detail_class = 9;
  if (this->detail_class() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->detail_class(), target);
  }

  // double detail_conf = 10;
  if (this->detail_conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->detail_conf(), target);
  }

  // .transform.proto.Rect detail_bbox = 11;
  if (this->has_detail_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_detail_bbox(), deterministic, target);
  }

  // int64 viewpoint = 12;
  if (this->viewpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->viewpoint(), target);
  }

  // int64 side_ratio = 13;
  if (this->side_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->side_ratio(), target);
  }

  // .transform.proto.Tire_Line_Rect tire_line = 14;
  if (this->has_tire_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_tire_line(), deterministic, target);
  }

  // int64 life_time = 15;
  if (this->life_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->life_time(), target);
  }

  // int64 timestamp = 16;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->timestamp(), target);
  }

  // double height = 17;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->height(), target);
  }

  // double width = 18;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->width(), target);
  }

  // double length = 19;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->length(), target);
  }

  // .transform.proto.Point distance = 20;
  if (this->has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_distance(), deterministic, target);
  }

  // .transform.proto.Point relative_velocity = 21;
  if (this->has_relative_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_relative_velocity(), deterministic, target);
  }

  // .transform.proto.Point relative_acceleration = 22;
  if (this->has_relative_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_relative_acceleration(), deterministic, target);
  }

  // double ttc = 23;
  if (this->ttc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->ttc(), target);
  }

  // double thw = 24;
  if (this->thw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->thw(), target);
  }

  // double angle_left = 25;
  if (this->angle_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->angle_left(), target);
  }

  // double angle_right = 26;
  if (this->angle_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->angle_right(), target);
  }

  // double yaw_angle = 27;
  if (this->yaw_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->yaw_angle(), target);
  }

  // .transform.proto.Object.MotionStatus motion_status = 28;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->motion_status(), target);
  }

  // int64 cipv = 29;
  if (this->cipv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->cipv(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Object)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string class_name = 4;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // string subclass_name = 6;
  if (this->subclass_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subclass_name());
  }

  // .transform.proto.Rect bbox = 8;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // .transform.proto.Rect detail_bbox = 11;
  if (this->has_detail_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detail_bbox_);
  }

  // .transform.proto.Tire_Line_Rect tire_line = 14;
  if (this->has_tire_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tire_line_);
  }

  // .transform.proto.Point distance = 20;
  if (this->has_distance()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distance_);
  }

  // .transform.proto.Point relative_velocity = 21;
  if (this->has_relative_velocity()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_velocity_);
  }

  // .transform.proto.Point relative_acceleration = 22;
  if (this->has_relative_acceleration()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_acceleration_);
  }

  // int64 camera_type = 1;
  if (this->camera_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->camera_type());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 class_ = 3;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subclass());
  }

  // double confidence = 7;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // int64 detail_class = 9;
  if (this->detail_class() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->detail_class());
  }

  // double detail_conf = 10;
  if (this->detail_conf() != 0) {
    total_size += 1 + 8;
  }

  // int64 viewpoint = 12;
  if (this->viewpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->viewpoint());
  }

  // int64 side_ratio = 13;
  if (this->side_ratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->side_ratio());
  }

  // int64 life_time = 15;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->life_time());
  }

  // int64 timestamp = 16;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // double height = 17;
  if (this->height() != 0) {
    total_size += 2 + 8;
  }

  // double width = 18;
  if (this->width() != 0) {
    total_size += 2 + 8;
  }

  // double length = 19;
  if (this->length() != 0) {
    total_size += 2 + 8;
  }

  // double ttc = 23;
  if (this->ttc() != 0) {
    total_size += 2 + 8;
  }

  // double thw = 24;
  if (this->thw() != 0) {
    total_size += 2 + 8;
  }

  // double angle_left = 25;
  if (this->angle_left() != 0) {
    total_size += 2 + 8;
  }

  // double angle_right = 26;
  if (this->angle_right() != 0) {
    total_size += 2 + 8;
  }

  // double yaw_angle = 27;
  if (this->yaw_angle() != 0) {
    total_size += 2 + 8;
  }

  // int64 cipv = 29;
  if (this->cipv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cipv());
  }

  // .transform.proto.Object.MotionStatus motion_status = 28;
  if (this->motion_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.subclass_name().size() > 0) {

    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::transform::proto::Rect::MergeFrom(from.bbox());
  }
  if (from.has_detail_bbox()) {
    mutable_detail_bbox()->::transform::proto::Rect::MergeFrom(from.detail_bbox());
  }
  if (from.has_tire_line()) {
    mutable_tire_line()->::transform::proto::Tire_Line_Rect::MergeFrom(from.tire_line());
  }
  if (from.has_distance()) {
    mutable_distance()->::transform::proto::Point::MergeFrom(from.distance());
  }
  if (from.has_relative_velocity()) {
    mutable_relative_velocity()->::transform::proto::Point::MergeFrom(from.relative_velocity());
  }
  if (from.has_relative_acceleration()) {
    mutable_relative_acceleration()->::transform::proto::Point::MergeFrom(from.relative_acceleration());
  }
  if (from.camera_type() != 0) {
    set_camera_type(from.camera_type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.subclass() != 0) {
    set_subclass(from.subclass());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.detail_class() != 0) {
    set_detail_class(from.detail_class());
  }
  if (from.detail_conf() != 0) {
    set_detail_conf(from.detail_conf());
  }
  if (from.viewpoint() != 0) {
    set_viewpoint(from.viewpoint());
  }
  if (from.side_ratio() != 0) {
    set_side_ratio(from.side_ratio());
  }
  if (from.life_time() != 0) {
    set_life_time(from.life_time());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.ttc() != 0) {
    set_ttc(from.ttc());
  }
  if (from.thw() != 0) {
    set_thw(from.thw());
  }
  if (from.angle_left() != 0) {
    set_angle_left(from.angle_left());
  }
  if (from.angle_right() != 0) {
    set_angle_right(from.angle_right());
  }
  if (from.yaw_angle() != 0) {
    set_yaw_angle(from.yaw_angle());
  }
  if (from.cipv() != 0) {
    set_cipv(from.cipv());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subclass_name_.Swap(&other->subclass_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bbox_, other->bbox_);
  swap(detail_bbox_, other->detail_bbox_);
  swap(tire_line_, other->tire_line_);
  swap(distance_, other->distance_);
  swap(relative_velocity_, other->relative_velocity_);
  swap(relative_acceleration_, other->relative_acceleration_);
  swap(camera_type_, other->camera_type_);
  swap(id_, other->id_);
  swap(class__, other->class__);
  swap(subclass_, other->subclass_);
  swap(confidence_, other->confidence_);
  swap(detail_class_, other->detail_class_);
  swap(detail_conf_, other->detail_conf_);
  swap(viewpoint_, other->viewpoint_);
  swap(side_ratio_, other->side_ratio_);
  swap(life_time_, other->life_time_);
  swap(timestamp_, other->timestamp_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(ttc_, other->ttc_);
  swap(thw_, other->thw_);
  swap(angle_left_, other->angle_left_);
  swap(angle_right_, other->angle_right_);
  swap(yaw_angle_, other->yaw_angle_);
  swap(cipv_, other->cipv_);
  swap(motion_status_, other->motion_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ped::InitAsDefaultInstance() {
  ::transform::proto::_Ped_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::transform::proto::Rect*>(
      ::transform::proto::Rect::internal_default_instance());
  ::transform::proto::_Ped_default_instance_._instance.get_mutable()->ppoint_ = const_cast< ::transform::proto::Ped_Point*>(
      ::transform::proto::Ped_Point::internal_default_instance());
  ::transform::proto::_Ped_default_instance_._instance.get_mutable()->distance_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
  ::transform::proto::_Ped_default_instance_._instance.get_mutable()->relative_velocity_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
  ::transform::proto::_Ped_default_instance_._instance.get_mutable()->relative_acceleration_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ped::kIdFieldNumber;
const int Ped::kClassFieldNumber;
const int Ped::kConfidenceFieldNumber;
const int Ped::kBboxFieldNumber;
const int Ped::kConf2FieldNumber;
const int Ped::kPpointFieldNumber;
const int Ped::kDistanceFieldNumber;
const int Ped::kRelativeVelocityFieldNumber;
const int Ped::kRelativeAccelerationFieldNumber;
const int Ped::kCippFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ped::Ped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Ped.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Ped)
}
Ped::Ped(const Ped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bbox()) {
    bbox_ = new ::transform::proto::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  if (from.has_ppoint()) {
    ppoint_ = new ::transform::proto::Ped_Point(*from.ppoint_);
  } else {
    ppoint_ = NULL;
  }
  if (from.has_distance()) {
    distance_ = new ::transform::proto::Point(*from.distance_);
  } else {
    distance_ = NULL;
  }
  if (from.has_relative_velocity()) {
    relative_velocity_ = new ::transform::proto::Point(*from.relative_velocity_);
  } else {
    relative_velocity_ = NULL;
  }
  if (from.has_relative_acceleration()) {
    relative_acceleration_ = new ::transform::proto::Point(*from.relative_acceleration_);
  } else {
    relative_acceleration_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cipp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cipp_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Ped)
}

void Ped::SharedCtor() {
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cipp_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(cipp_));
}

Ped::~Ped() {
  // @@protoc_insertion_point(destructor:transform.proto.Ped)
  SharedDtor();
}

void Ped::SharedDtor() {
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete ppoint_;
  if (this != internal_default_instance()) delete distance_;
  if (this != internal_default_instance()) delete relative_velocity_;
  if (this != internal_default_instance()) delete relative_acceleration_;
}

void Ped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ped::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ped& Ped::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Ped.base);
  return *internal_default_instance();
}


void Ped::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Ped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && ppoint_ != NULL) {
    delete ppoint_;
  }
  ppoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && distance_ != NULL) {
    delete distance_;
  }
  distance_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL) {
    delete relative_velocity_;
  }
  relative_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL) {
    delete relative_acceleration_;
  }
  relative_acceleration_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cipp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cipp_));
  _internal_metadata_.Clear();
}

bool Ped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Ped)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Rect bbox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conf2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Ped_Point ppoint = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ppoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point relative_velocity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point relative_acceleration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cipp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cipp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Ped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Ped)
  return false;
#undef DO_
}

void Ped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Ped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // int64 class_ = 3;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->class_(), output);
  }

  // double confidence = 7;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->confidence(), output);
  }

  // .transform.proto.Rect bbox = 8;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_bbox(), output);
  }

  // double conf2 = 9;
  if (this->conf2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->conf2(), output);
  }

  // .transform.proto.Ped_Point ppoint = 10;
  if (this->has_ppoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_ppoint(), output);
  }

  // .transform.proto.Point distance = 11;
  if (this->has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_distance(), output);
  }

  // .transform.proto.Point relative_velocity = 12;
  if (this->has_relative_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_relative_velocity(), output);
  }

  // .transform.proto.Point relative_acceleration = 13;
  if (this->has_relative_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_relative_acceleration(), output);
  }

  // int64 cipp = 14;
  if (this->cipp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->cipp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Ped)
}

::google::protobuf::uint8* Ped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Ped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // int64 class_ = 3;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->class_(), target);
  }

  // double confidence = 7;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->confidence(), target);
  }

  // .transform.proto.Rect bbox = 8;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_bbox(), deterministic, target);
  }

  // double conf2 = 9;
  if (this->conf2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->conf2(), target);
  }

  // .transform.proto.Ped_Point ppoint = 10;
  if (this->has_ppoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_ppoint(), deterministic, target);
  }

  // .transform.proto.Point distance = 11;
  if (this->has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_distance(), deterministic, target);
  }

  // .transform.proto.Point relative_velocity = 12;
  if (this->has_relative_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_relative_velocity(), deterministic, target);
  }

  // .transform.proto.Point relative_acceleration = 13;
  if (this->has_relative_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_relative_acceleration(), deterministic, target);
  }

  // int64 cipp = 14;
  if (this->cipp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->cipp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Ped)
  return target;
}

size_t Ped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Ped)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .transform.proto.Rect bbox = 8;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // .transform.proto.Ped_Point ppoint = 10;
  if (this->has_ppoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ppoint_);
  }

  // .transform.proto.Point distance = 11;
  if (this->has_distance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distance_);
  }

  // .transform.proto.Point relative_velocity = 12;
  if (this->has_relative_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_velocity_);
  }

  // .transform.proto.Point relative_acceleration = 13;
  if (this->has_relative_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_acceleration_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 class_ = 3;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // double confidence = 7;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // double conf2 = 9;
  if (this->conf2() != 0) {
    total_size += 1 + 8;
  }

  // int64 cipp = 14;
  if (this->cipp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cipp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Ped)
  GOOGLE_DCHECK_NE(&from, this);
  const Ped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Ped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Ped)
    MergeFrom(*source);
  }
}

void Ped::MergeFrom(const Ped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Ped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bbox()) {
    mutable_bbox()->::transform::proto::Rect::MergeFrom(from.bbox());
  }
  if (from.has_ppoint()) {
    mutable_ppoint()->::transform::proto::Ped_Point::MergeFrom(from.ppoint());
  }
  if (from.has_distance()) {
    mutable_distance()->::transform::proto::Point::MergeFrom(from.distance());
  }
  if (from.has_relative_velocity()) {
    mutable_relative_velocity()->::transform::proto::Point::MergeFrom(from.relative_velocity());
  }
  if (from.has_relative_acceleration()) {
    mutable_relative_acceleration()->::transform::proto::Point::MergeFrom(from.relative_acceleration());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.conf2() != 0) {
    set_conf2(from.conf2());
  }
  if (from.cipp() != 0) {
    set_cipp(from.cipp());
  }
}

void Ped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Ped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ped::CopyFrom(const Ped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Ped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ped::IsInitialized() const {
  return true;
}

void Ped::Swap(Ped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ped::InternalSwap(Ped* other) {
  using std::swap;
  swap(bbox_, other->bbox_);
  swap(ppoint_, other->ppoint_);
  swap(distance_, other->distance_);
  swap(relative_velocity_, other->relative_velocity_);
  swap(relative_acceleration_, other->relative_acceleration_);
  swap(id_, other->id_);
  swap(class__, other->class__);
  swap(confidence_, other->confidence_);
  swap(conf2_, other->conf2_);
  swap(cipp_, other->cipp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ped::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneOrigin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneOrigin::kConfFieldNumber;
const int LaneOrigin::kXFieldNumber;
const int LaneOrigin::kYFieldNumber;
const int LaneOrigin::kZFieldNumber;
const int LaneOrigin::kTpsFieldNumber;
const int LaneOrigin::kKFieldNumber;
const int LaneOrigin::kF1FieldNumber;
const int LaneOrigin::kF2FieldNumber;
const int LaneOrigin::kExDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneOrigin::LaneOrigin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_LaneOrigin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.LaneOrigin)
}
LaneOrigin::LaneOrigin(const LaneOrigin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ex_data_(from.ex_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&conf_, &from.conf_,
    static_cast<size_t>(reinterpret_cast<char*>(&tps_) -
    reinterpret_cast<char*>(&conf_)) + sizeof(tps_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.LaneOrigin)
}

void LaneOrigin::SharedCtor() {
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tps_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(tps_));
}

LaneOrigin::~LaneOrigin() {
  // @@protoc_insertion_point(destructor:transform.proto.LaneOrigin)
  SharedDtor();
}

void LaneOrigin::SharedDtor() {
}

void LaneOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneOrigin::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneOrigin& LaneOrigin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_LaneOrigin.base);
  return *internal_default_instance();
}


void LaneOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.LaneOrigin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ex_data_.Clear();
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tps_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(tps_));
  _internal_metadata_.Clear();
}

bool LaneOrigin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.LaneOrigin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double f1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double f2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double ex_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ex_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82u, input, this->mutable_ex_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.LaneOrigin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.LaneOrigin)
  return false;
#undef DO_
}

void LaneOrigin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.LaneOrigin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double conf = 1;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->conf(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // double z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z(), output);
  }

  // int32 tps = 5;
  if (this->tps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tps(), output);
  }

  // double k = 6;
  if (this->k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->k(), output);
  }

  // double f1 = 7;
  if (this->f1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->f1(), output);
  }

  // double f2 = 8;
  if (this->f2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->f2(), output);
  }

  // repeated double ex_data = 10;
  if (this->ex_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ex_data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->ex_data().data(), this->ex_data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.LaneOrigin)
}

::google::protobuf::uint8* LaneOrigin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.LaneOrigin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double conf = 1;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->conf(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // double z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z(), target);
  }

  // int32 tps = 5;
  if (this->tps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tps(), target);
  }

  // double k = 6;
  if (this->k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->k(), target);
  }

  // double f1 = 7;
  if (this->f1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->f1(), target);
  }

  // double f2 = 8;
  if (this->f2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->f2(), target);
  }

  // repeated double ex_data = 10;
  if (this->ex_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ex_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ex_data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.LaneOrigin)
  return target;
}

size_t LaneOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.LaneOrigin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double ex_data = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->ex_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ex_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double conf = 1;
  if (this->conf() != 0) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 4;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double k = 6;
  if (this->k() != 0) {
    total_size += 1 + 8;
  }

  // double f1 = 7;
  if (this->f1() != 0) {
    total_size += 1 + 8;
  }

  // double f2 = 8;
  if (this->f2() != 0) {
    total_size += 1 + 8;
  }

  // int32 tps = 5;
  if (this->tps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneOrigin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.LaneOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneOrigin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneOrigin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.LaneOrigin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.LaneOrigin)
    MergeFrom(*source);
  }
}

void LaneOrigin::MergeFrom(const LaneOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.LaneOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ex_data_.MergeFrom(from.ex_data_);
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (from.f1() != 0) {
    set_f1(from.f1());
  }
  if (from.f2() != 0) {
    set_f2(from.f2());
  }
  if (from.tps() != 0) {
    set_tps(from.tps());
  }
}

void LaneOrigin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.LaneOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneOrigin::CopyFrom(const LaneOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.LaneOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneOrigin::IsInitialized() const {
  return true;
}

void LaneOrigin::Swap(LaneOrigin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneOrigin::InternalSwap(LaneOrigin* other) {
  using std::swap;
  ex_data_.InternalSwap(&other->ex_data_);
  swap(conf_, other->conf_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(k_, other->k_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(tps_, other->tps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneOrigin::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::transform::proto::_Lane_default_instance_._instance.get_mutable()->start_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
  ::transform::proto::_Lane_default_instance_._instance.get_mutable()->end_ = const_cast< ::transform::proto::Point*>(
      ::transform::proto::Point::internal_default_instance());
  ::transform::proto::_Lane_default_instance_._instance.get_mutable()->cali_info_ = const_cast< ::transform::proto::CaliInfo*>(
      ::transform::proto::CaliInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kCoordinateTypeFieldNumber;
const int Lane::kC0FieldNumber;
const int Lane::kC1FieldNumber;
const int Lane::kC2FieldNumber;
const int Lane::kC3FieldNumber;
const int Lane::kIndexFieldNumber;
const int Lane::kQualityFieldNumber;
const int Lane::kLineTypeFieldNumber;
const int Lane::kLineColorFieldNumber;
const int Lane::kStartFieldNumber;
const int Lane::kEndFieldNumber;
const int Lane::kDistanceToHostFieldNumber;
const int Lane::kImagePointsFieldNumber;
const int Lane::kLaneOriginFieldNumber;
const int Lane::kWidthFieldNumber;
const int Lane::kLineIdFieldNumber;
const int Lane::kCameraIndexFieldNumber;
const int Lane::kCaliInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_points_(from.image_points_),
      lane_origin_(from.lane_origin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::transform::proto::Point(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::transform::proto::Point(*from.end_);
  } else {
    end_ = NULL;
  }
  if (from.has_cali_info()) {
    cali_info_ = new ::transform::proto::CaliInfo(*from.cali_info_);
  } else {
    cali_info_ = NULL;
  }
  ::memcpy(&c0_, &from.c0_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_color_) -
    reinterpret_cast<char*>(&c0_)) + sizeof(line_color_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Lane)
}

void Lane::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_color_) -
      reinterpret_cast<char*>(&start_)) + sizeof(line_color_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:transform.proto.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete cali_info_;
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_points_.Clear();
  lane_origin_.Clear();
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
  if (GetArenaNoVirtual() == NULL && cali_info_ != NULL) {
    delete cali_info_;
  }
  cali_info_ = NULL;
  ::memset(&c0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_color_) -
      reinterpret_cast<char*>(&c0_)) + sizeof(line_color_));
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .transform.proto.Lane.CoordinateType coordinate_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coordinate_type(static_cast< ::transform::proto::Lane_CoordinateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quality = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Lane.LineType line_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_line_type(static_cast< ::transform::proto::Lane_LineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Lane.LineColor line_color = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_line_color(static_cast< ::transform::proto::Lane_LineColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point start = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Point end = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance_to_host = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transform.proto.Point image_points = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_image_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transform.proto.LaneOrigin lane_origin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 line_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 camera_index = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &camera_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.CaliInfo cali_info = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cali_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .transform.proto.Lane.CoordinateType coordinate_type = 1;
  if (this->coordinate_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->coordinate_type(), output);
  }

  // double C0 = 2;
  if (this->c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->c0(), output);
  }

  // double C1 = 3;
  if (this->c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c1(), output);
  }

  // double C2 = 4;
  if (this->c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c2(), output);
  }

  // double C3 = 5;
  if (this->c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c3(), output);
  }

  // int64 index = 6;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->index(), output);
  }

  // int64 quality = 7;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->quality(), output);
  }

  // .transform.proto.Lane.LineType line_type = 8;
  if (this->line_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->line_type(), output);
  }

  // .transform.proto.Lane.LineColor line_color = 9;
  if (this->line_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->line_color(), output);
  }

  // .transform.proto.Point start = 10;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_start(), output);
  }

  // .transform.proto.Point end = 11;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_end(), output);
  }

  // double distance_to_host = 12;
  if (this->distance_to_host() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->distance_to_host(), output);
  }

  // repeated .transform.proto.Point image_points = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->image_points(static_cast<int>(i)),
      output);
  }

  // repeated .transform.proto.LaneOrigin lane_origin = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_origin_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->lane_origin(static_cast<int>(i)),
      output);
  }

  // double width = 16;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->width(), output);
  }

  // int64 line_id = 17;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->line_id(), output);
  }

  // int64 camera_index = 18;
  if (this->camera_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->camera_index(), output);
  }

  // .transform.proto.CaliInfo cali_info = 19;
  if (this->has_cali_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_cali_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .transform.proto.Lane.CoordinateType coordinate_type = 1;
  if (this->coordinate_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->coordinate_type(), target);
  }

  // double C0 = 2;
  if (this->c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->c0(), target);
  }

  // double C1 = 3;
  if (this->c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c1(), target);
  }

  // double C2 = 4;
  if (this->c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c2(), target);
  }

  // double C3 = 5;
  if (this->c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c3(), target);
  }

  // int64 index = 6;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->index(), target);
  }

  // int64 quality = 7;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->quality(), target);
  }

  // .transform.proto.Lane.LineType line_type = 8;
  if (this->line_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->line_type(), target);
  }

  // .transform.proto.Lane.LineColor line_color = 9;
  if (this->line_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->line_color(), target);
  }

  // .transform.proto.Point start = 10;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_start(), deterministic, target);
  }

  // .transform.proto.Point end = 11;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_end(), deterministic, target);
  }

  // double distance_to_host = 12;
  if (this->distance_to_host() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->distance_to_host(), target);
  }

  // repeated .transform.proto.Point image_points = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->image_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .transform.proto.LaneOrigin lane_origin = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_origin_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->lane_origin(static_cast<int>(i)), deterministic, target);
  }

  // double width = 16;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->width(), target);
  }

  // int64 line_id = 17;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->line_id(), target);
  }

  // int64 camera_index = 18;
  if (this->camera_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->camera_index(), target);
  }

  // .transform.proto.CaliInfo cali_info = 19;
  if (this->has_cali_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_cali_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .transform.proto.Point image_points = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->image_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_points(static_cast<int>(i)));
    }
  }

  // repeated .transform.proto.LaneOrigin lane_origin = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_origin_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_origin(static_cast<int>(i)));
    }
  }

  // .transform.proto.Point start = 10;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .transform.proto.Point end = 11;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .transform.proto.CaliInfo cali_info = 19;
  if (this->has_cali_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cali_info_);
  }

  // double C0 = 2;
  if (this->c0() != 0) {
    total_size += 1 + 8;
  }

  // double C1 = 3;
  if (this->c1() != 0) {
    total_size += 1 + 8;
  }

  // double C2 = 4;
  if (this->c2() != 0) {
    total_size += 1 + 8;
  }

  // .transform.proto.Lane.CoordinateType coordinate_type = 1;
  if (this->coordinate_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coordinate_type());
  }

  // .transform.proto.Lane.LineType line_type = 8;
  if (this->line_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_type());
  }

  // double C3 = 5;
  if (this->c3() != 0) {
    total_size += 1 + 8;
  }

  // int64 index = 6;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 quality = 7;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quality());
  }

  // double distance_to_host = 12;
  if (this->distance_to_host() != 0) {
    total_size += 1 + 8;
  }

  // double width = 16;
  if (this->width() != 0) {
    total_size += 2 + 8;
  }

  // int64 line_id = 17;
  if (this->line_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_id());
  }

  // int64 camera_index = 18;
  if (this->camera_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->camera_index());
  }

  // .transform.proto.Lane.LineColor line_color = 9;
  if (this->line_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_points_.MergeFrom(from.image_points_);
  lane_origin_.MergeFrom(from.lane_origin_);
  if (from.has_start()) {
    mutable_start()->::transform::proto::Point::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::transform::proto::Point::MergeFrom(from.end());
  }
  if (from.has_cali_info()) {
    mutable_cali_info()->::transform::proto::CaliInfo::MergeFrom(from.cali_info());
  }
  if (from.c0() != 0) {
    set_c0(from.c0());
  }
  if (from.c1() != 0) {
    set_c1(from.c1());
  }
  if (from.c2() != 0) {
    set_c2(from.c2());
  }
  if (from.coordinate_type() != 0) {
    set_coordinate_type(from.coordinate_type());
  }
  if (from.line_type() != 0) {
    set_line_type(from.line_type());
  }
  if (from.c3() != 0) {
    set_c3(from.c3());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.distance_to_host() != 0) {
    set_distance_to_host(from.distance_to_host());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
  if (from.camera_index() != 0) {
    set_camera_index(from.camera_index());
  }
  if (from.line_color() != 0) {
    set_line_color(from.line_color());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  CastToBase(&image_points_)->InternalSwap(CastToBase(&other->image_points_));
  CastToBase(&lane_origin_)->InternalSwap(CastToBase(&other->lane_origin_));
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(cali_info_, other->cali_info_);
  swap(c0_, other->c0_);
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(coordinate_type_, other->coordinate_type_);
  swap(line_type_, other->line_type_);
  swap(c3_, other->c3_);
  swap(index_, other->index_);
  swap(quality_, other->quality_);
  swap(distance_to_host_, other->distance_to_host_);
  swap(width_, other->width_);
  swap(line_id_, other->line_id_);
  swap(camera_index_, other->camera_index_);
  swap(line_color_, other->line_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kSerialNumberFieldNumber;
const int Header::kProtocolVersionFieldNumber;
const int Header::kHardVersionFieldNumber;
const int Header::kSoftVersionFieldNumber;
const int Header::kImageFormatFieldNumber;
const int Header::kCarTypeFieldNumber;
const int Header::kTsintelConfigFieldNumber;
const int Header::kRunModeFieldNumber;
const int Header::kObjectVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol_version().size() > 0) {
    protocol_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_version_);
  }
  hard_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hard_version().size() > 0) {
    hard_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hard_version_);
  }
  soft_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.soft_version().size() > 0) {
    soft_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.soft_version_);
  }
  car_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.car_type().size() > 0) {
    car_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_type_);
  }
  tsintel_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tsintel_config().size() > 0) {
    tsintel_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tsintel_config_);
  }
  run_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.run_mode().size() > 0) {
    run_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_mode_);
  }
  object_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_version().size() > 0) {
    object_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_version_);
  }
  image_format_ = from.image_format_;
  // @@protoc_insertion_point(copy_constructor:transform.proto.Header)
}

void Header::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hard_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  soft_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tsintel_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_format_ = GOOGLE_LONGLONG(0);
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:transform.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hard_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  soft_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tsintel_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hard_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  soft_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tsintel_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_format_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Header.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol_version().data(), static_cast<int>(this->protocol_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Header.protocol_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hard_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hard_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hard_version().data(), static_cast<int>(this->hard_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Header.hard_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string soft_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soft_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->soft_version().data(), static_cast<int>(this->soft_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Header.soft_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 image_format = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &image_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string car_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_type().data(), static_cast<int>(this->car_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Header.car_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tsintel_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tsintel_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string run_mode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_run_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->run_mode().data(), static_cast<int>(this->run_mode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Header.run_mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_version().data(), static_cast<int>(this->object_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transform.proto.Header.object_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // string protocol_version = 2;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), static_cast<int>(this->protocol_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.protocol_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol_version(), output);
  }

  // string hard_version = 3;
  if (this->hard_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hard_version().data(), static_cast<int>(this->hard_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.hard_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hard_version(), output);
  }

  // string soft_version = 4;
  if (this->soft_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->soft_version().data(), static_cast<int>(this->soft_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.soft_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->soft_version(), output);
  }

  // int64 image_format = 5;
  if (this->image_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->image_format(), output);
  }

  // string car_type = 6;
  if (this->car_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_type().data(), static_cast<int>(this->car_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.car_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->car_type(), output);
  }

  // bytes tsintel_config = 7;
  if (this->tsintel_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->tsintel_config(), output);
  }

  // string run_mode = 8;
  if (this->run_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->run_mode().data(), static_cast<int>(this->run_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.run_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->run_mode(), output);
  }

  // string object_version = 9;
  if (this->object_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_version().data(), static_cast<int>(this->object_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.object_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->object_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // string protocol_version = 2;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), static_cast<int>(this->protocol_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.protocol_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol_version(), target);
  }

  // string hard_version = 3;
  if (this->hard_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hard_version().data(), static_cast<int>(this->hard_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.hard_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hard_version(), target);
  }

  // string soft_version = 4;
  if (this->soft_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->soft_version().data(), static_cast<int>(this->soft_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.soft_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->soft_version(), target);
  }

  // int64 image_format = 5;
  if (this->image_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->image_format(), target);
  }

  // string car_type = 6;
  if (this->car_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_type().data(), static_cast<int>(this->car_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.car_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->car_type(), target);
  }

  // bytes tsintel_config = 7;
  if (this->tsintel_config().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->tsintel_config(), target);
  }

  // string run_mode = 8;
  if (this->run_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->run_mode().data(), static_cast<int>(this->run_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.run_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->run_mode(), target);
  }

  // string object_version = 9;
  if (this->object_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_version().data(), static_cast<int>(this->object_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transform.proto.Header.object_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->object_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string protocol_version = 2;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_version());
  }

  // string hard_version = 3;
  if (this->hard_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hard_version());
  }

  // string soft_version = 4;
  if (this->soft_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->soft_version());
  }

  // string car_type = 6;
  if (this->car_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_type());
  }

  // bytes tsintel_config = 7;
  if (this->tsintel_config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tsintel_config());
  }

  // string run_mode = 8;
  if (this->run_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->run_mode());
  }

  // string object_version = 9;
  if (this->object_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_version());
  }

  // int64 image_format = 5;
  if (this->image_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->image_format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.protocol_version().size() > 0) {

    protocol_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_version_);
  }
  if (from.hard_version().size() > 0) {

    hard_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hard_version_);
  }
  if (from.soft_version().size() > 0) {

    soft_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.soft_version_);
  }
  if (from.car_type().size() > 0) {

    car_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_type_);
  }
  if (from.tsintel_config().size() > 0) {

    tsintel_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tsintel_config_);
  }
  if (from.run_mode().size() > 0) {

    run_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_mode_);
  }
  if (from.object_version().size() > 0) {

    object_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_version_);
  }
  if (from.image_format() != 0) {
    set_image_format(from.image_format());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_version_.Swap(&other->protocol_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hard_version_.Swap(&other->hard_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  soft_version_.Swap(&other->soft_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  car_type_.Swap(&other->car_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tsintel_config_.Swap(&other->tsintel_config_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  run_mode_.Swap(&other->run_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  object_version_.Swap(&other->object_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_format_, other->image_format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::transform::proto::_Frame_default_instance_._instance.get_mutable()->header_ = const_cast< ::transform::proto::Header*>(
      ::transform::proto::Header::internal_default_instance());
  ::transform::proto::_Frame_default_instance_._instance.get_mutable()->raw_image_ = const_cast< ::transform::proto::Image*>(
      ::transform::proto::Image::internal_default_instance());
  ::transform::proto::_Frame_default_instance_._instance.get_mutable()->car_info_ = const_cast< ::transform::proto::CarCanInfo*>(
      ::transform::proto::CarCanInfo::internal_default_instance());
  ::transform::proto::_Frame_default_instance_._instance.get_mutable()->lane_crop_ = const_cast< ::transform::proto::Rect*>(
      ::transform::proto::Rect::internal_default_instance());
  ::transform::proto::_Frame_default_instance_._instance.get_mutable()->object_crop_ = const_cast< ::transform::proto::Rect*>(
      ::transform::proto::Rect::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kHeaderFieldNumber;
const int Frame::kIdFieldNumber;
const int Frame::kRawCanFieldNumber;
const int Frame::kObjectFieldNumber;
const int Frame::kPedFieldNumber;
const int Frame::kLaneFieldNumber;
const int Frame::kCipvIdFieldNumber;
const int Frame::kLdwStatusFieldNumber;
const int Frame::kFcwStatusFieldNumber;
const int Frame::kPcwStatusFieldNumber;
const int Frame::kAswStatusFieldNumber;
const int Frame::kBsdStatusFieldNumber;
const int Frame::kLaneNumberFieldNumber;
const int Frame::kTtlcFieldNumber;
const int Frame::kTimestampFieldNumber;
const int Frame::kRawImageFieldNumber;
const int Frame::kCarInfoFieldNumber;
const int Frame::kLaneCropFieldNumber;
const int Frame::kObjectCropFieldNumber;
const int Frame::kShutterFieldNumber;
const int Frame::kRegionFieldNumber;
const int Frame::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_Frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      raw_can_(from.raw_can_),
      object_(from.object_),
      ped_(from.ped_),
      lane_(from.lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::transform::proto::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_raw_image()) {
    raw_image_ = new ::transform::proto::Image(*from.raw_image_);
  } else {
    raw_image_ = NULL;
  }
  if (from.has_car_info()) {
    car_info_ = new ::transform::proto::CarCanInfo(*from.car_info_);
  } else {
    car_info_ = NULL;
  }
  if (from.has_lane_crop()) {
    lane_crop_ = new ::transform::proto::Rect(*from.lane_crop_);
  } else {
    lane_crop_ = NULL;
  }
  if (from.has_object_crop()) {
    object_crop_ = new ::transform::proto::Rect(*from.object_crop_);
  } else {
    object_crop_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&id_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:transform.proto.Frame)
}

void Frame::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&header_)) + sizeof(source_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:transform.proto.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete raw_image_;
  if (this != internal_default_instance()) delete car_info_;
  if (this != internal_default_instance()) delete lane_crop_;
  if (this != internal_default_instance()) delete object_crop_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_Frame.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_can_.Clear();
  object_.Clear();
  ped_.Clear();
  lane_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && raw_image_ != NULL) {
    delete raw_image_;
  }
  raw_image_ = NULL;
  if (GetArenaNoVirtual() == NULL && car_info_ != NULL) {
    delete car_info_;
  }
  car_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_crop_ != NULL) {
    delete lane_crop_;
  }
  lane_crop_ = NULL;
  if (GetArenaNoVirtual() == NULL && object_crop_ != NULL) {
    delete object_crop_;
  }
  object_crop_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&id_)) + sizeof(source_));
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .transform.proto.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transform.proto.Can raw_can = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_raw_can()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transform.proto.Object object = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transform.proto.Ped ped = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .transform.proto.Lane lane = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cipv_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cipv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ldw_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ldw_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fcw_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fcw_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pcw_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pcw_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 asw_status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &asw_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bsd_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bsd_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lane_number = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lane_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ttlc = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ttlc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Image raw_image = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.CarCanInfo car_info = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_car_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Rect lane_crop = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Rect object_crop = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shutter = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shutter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Region region = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_region(static_cast< ::transform::proto::Region >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .transform.proto.Source source = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::transform::proto::Source >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .transform.proto.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // repeated .transform.proto.Can raw_can = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->raw_can_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->raw_can(static_cast<int>(i)),
      output);
  }

  // repeated .transform.proto.Object object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->object(static_cast<int>(i)),
      output);
  }

  // repeated .transform.proto.Ped ped = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ped_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ped(static_cast<int>(i)),
      output);
  }

  // repeated .transform.proto.Lane lane = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->lane(static_cast<int>(i)),
      output);
  }

  // int64 cipv_id = 7;
  if (this->cipv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->cipv_id(), output);
  }

  // int64 ldw_status = 8;
  if (this->ldw_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ldw_status(), output);
  }

  // int64 fcw_status = 9;
  if (this->fcw_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->fcw_status(), output);
  }

  // int64 pcw_status = 10;
  if (this->pcw_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->pcw_status(), output);
  }

  // int64 asw_status = 11;
  if (this->asw_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->asw_status(), output);
  }

  // int64 bsd_status = 12;
  if (this->bsd_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->bsd_status(), output);
  }

  // int64 lane_number = 13;
  if (this->lane_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->lane_number(), output);
  }

  // double ttlc = 14;
  if (this->ttlc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->ttlc(), output);
  }

  // int64 timestamp = 15;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->timestamp(), output);
  }

  // .transform.proto.Image raw_image = 16;
  if (this->has_raw_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_raw_image(), output);
  }

  // .transform.proto.CarCanInfo car_info = 17;
  if (this->has_car_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_car_info(), output);
  }

  // .transform.proto.Rect lane_crop = 18;
  if (this->has_lane_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_lane_crop(), output);
  }

  // .transform.proto.Rect object_crop = 19;
  if (this->has_object_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_object_crop(), output);
  }

  // int64 shutter = 20;
  if (this->shutter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->shutter(), output);
  }

  // .transform.proto.Region region = 21;
  if (this->region() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->region(), output);
  }

  // .transform.proto.Source source = 22;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->source(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .transform.proto.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // repeated .transform.proto.Can raw_can = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->raw_can_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->raw_can(static_cast<int>(i)), deterministic, target);
  }

  // repeated .transform.proto.Object object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .transform.proto.Ped ped = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ped_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ped(static_cast<int>(i)), deterministic, target);
  }

  // repeated .transform.proto.Lane lane = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->lane(static_cast<int>(i)), deterministic, target);
  }

  // int64 cipv_id = 7;
  if (this->cipv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->cipv_id(), target);
  }

  // int64 ldw_status = 8;
  if (this->ldw_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->ldw_status(), target);
  }

  // int64 fcw_status = 9;
  if (this->fcw_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->fcw_status(), target);
  }

  // int64 pcw_status = 10;
  if (this->pcw_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->pcw_status(), target);
  }

  // int64 asw_status = 11;
  if (this->asw_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->asw_status(), target);
  }

  // int64 bsd_status = 12;
  if (this->bsd_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->bsd_status(), target);
  }

  // int64 lane_number = 13;
  if (this->lane_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->lane_number(), target);
  }

  // double ttlc = 14;
  if (this->ttlc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->ttlc(), target);
  }

  // int64 timestamp = 15;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->timestamp(), target);
  }

  // .transform.proto.Image raw_image = 16;
  if (this->has_raw_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_raw_image(), deterministic, target);
  }

  // .transform.proto.CarCanInfo car_info = 17;
  if (this->has_car_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_car_info(), deterministic, target);
  }

  // .transform.proto.Rect lane_crop = 18;
  if (this->has_lane_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_lane_crop(), deterministic, target);
  }

  // .transform.proto.Rect object_crop = 19;
  if (this->has_object_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_object_crop(), deterministic, target);
  }

  // int64 shutter = 20;
  if (this->shutter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->shutter(), target);
  }

  // .transform.proto.Region region = 21;
  if (this->region() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->region(), target);
  }

  // .transform.proto.Source source = 22;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->source(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.Frame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .transform.proto.Can raw_can = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->raw_can_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->raw_can(static_cast<int>(i)));
    }
  }

  // repeated .transform.proto.Object object = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object(static_cast<int>(i)));
    }
  }

  // repeated .transform.proto.Ped ped = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ped_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ped(static_cast<int>(i)));
    }
  }

  // repeated .transform.proto.Lane lane = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  // .transform.proto.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .transform.proto.Image raw_image = 16;
  if (this->has_raw_image()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *raw_image_);
  }

  // .transform.proto.CarCanInfo car_info = 17;
  if (this->has_car_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *car_info_);
  }

  // .transform.proto.Rect lane_crop = 18;
  if (this->has_lane_crop()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_crop_);
  }

  // .transform.proto.Rect object_crop = 19;
  if (this->has_object_crop()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_crop_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 cipv_id = 7;
  if (this->cipv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cipv_id());
  }

  // int64 ldw_status = 8;
  if (this->ldw_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ldw_status());
  }

  // int64 fcw_status = 9;
  if (this->fcw_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fcw_status());
  }

  // int64 pcw_status = 10;
  if (this->pcw_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pcw_status());
  }

  // int64 asw_status = 11;
  if (this->asw_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->asw_status());
  }

  // int64 bsd_status = 12;
  if (this->bsd_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bsd_status());
  }

  // int64 lane_number = 13;
  if (this->lane_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lane_number());
  }

  // double ttlc = 14;
  if (this->ttlc() != 0) {
    total_size += 1 + 8;
  }

  // int64 timestamp = 15;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 shutter = 20;
  if (this->shutter() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shutter());
  }

  // .transform.proto.Region region = 21;
  if (this->region() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
  }

  // .transform.proto.Source source = 22;
  if (this->source() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_can_.MergeFrom(from.raw_can_);
  object_.MergeFrom(from.object_);
  ped_.MergeFrom(from.ped_);
  lane_.MergeFrom(from.lane_);
  if (from.has_header()) {
    mutable_header()->::transform::proto::Header::MergeFrom(from.header());
  }
  if (from.has_raw_image()) {
    mutable_raw_image()->::transform::proto::Image::MergeFrom(from.raw_image());
  }
  if (from.has_car_info()) {
    mutable_car_info()->::transform::proto::CarCanInfo::MergeFrom(from.car_info());
  }
  if (from.has_lane_crop()) {
    mutable_lane_crop()->::transform::proto::Rect::MergeFrom(from.lane_crop());
  }
  if (from.has_object_crop()) {
    mutable_object_crop()->::transform::proto::Rect::MergeFrom(from.object_crop());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cipv_id() != 0) {
    set_cipv_id(from.cipv_id());
  }
  if (from.ldw_status() != 0) {
    set_ldw_status(from.ldw_status());
  }
  if (from.fcw_status() != 0) {
    set_fcw_status(from.fcw_status());
  }
  if (from.pcw_status() != 0) {
    set_pcw_status(from.pcw_status());
  }
  if (from.asw_status() != 0) {
    set_asw_status(from.asw_status());
  }
  if (from.bsd_status() != 0) {
    set_bsd_status(from.bsd_status());
  }
  if (from.lane_number() != 0) {
    set_lane_number(from.lane_number());
  }
  if (from.ttlc() != 0) {
    set_ttlc(from.ttlc());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.shutter() != 0) {
    set_shutter(from.shutter());
  }
  if (from.region() != 0) {
    set_region(from.region());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  CastToBase(&raw_can_)->InternalSwap(CastToBase(&other->raw_can_));
  CastToBase(&object_)->InternalSwap(CastToBase(&other->object_));
  CastToBase(&ped_)->InternalSwap(CastToBase(&other->ped_));
  CastToBase(&lane_)->InternalSwap(CastToBase(&other->lane_));
  swap(header_, other->header_);
  swap(raw_image_, other->raw_image_);
  swap(car_info_, other->car_info_);
  swap(lane_crop_, other->lane_crop_);
  swap(object_crop_, other->object_crop_);
  swap(id_, other->id_);
  swap(cipv_id_, other->cipv_id_);
  swap(ldw_status_, other->ldw_status_);
  swap(fcw_status_, other->fcw_status_);
  swap(pcw_status_, other->pcw_status_);
  swap(asw_status_, other->asw_status_);
  swap(bsd_status_, other->bsd_status_);
  swap(lane_number_, other->lane_number_);
  swap(ttlc_, other->ttlc_);
  swap(timestamp_, other->timestamp_);
  swap(shutter_, other->shutter_);
  swap(region_, other->region_);
  swap(source_, other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiFrame::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiFrame::MultiFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transform_2eproto::scc_info_MultiFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:transform.proto.MultiFrame)
}
MultiFrame::MultiFrame(const MultiFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frame_(from.frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transform.proto.MultiFrame)
}

void MultiFrame::SharedCtor() {
}

MultiFrame::~MultiFrame() {
  // @@protoc_insertion_point(destructor:transform.proto.MultiFrame)
  SharedDtor();
}

void MultiFrame::SharedDtor() {
}

void MultiFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiFrame::descriptor() {
  ::protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiFrame& MultiFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transform_2eproto::scc_info_MultiFrame.base);
  return *internal_default_instance();
}


void MultiFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:transform.proto.MultiFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.Clear();
  _internal_metadata_.Clear();
}

bool MultiFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transform.proto.MultiFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transform.proto.Frame frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transform.proto.MultiFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transform.proto.MultiFrame)
  return false;
#undef DO_
}

void MultiFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transform.proto.MultiFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transform.proto.Frame frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->frame(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transform.proto.MultiFrame)
}

::google::protobuf::uint8* MultiFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transform.proto.MultiFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transform.proto.Frame frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->frame(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transform.proto.MultiFrame)
  return target;
}

size_t MultiFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transform.proto.MultiFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .transform.proto.Frame frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frame(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transform.proto.MultiFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transform.proto.MultiFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transform.proto.MultiFrame)
    MergeFrom(*source);
  }
}

void MultiFrame::MergeFrom(const MultiFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transform.proto.MultiFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_.MergeFrom(from.frame_);
}

void MultiFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transform.proto.MultiFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiFrame::CopyFrom(const MultiFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transform.proto.MultiFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiFrame::IsInitialized() const {
  return true;
}

void MultiFrame::Swap(MultiFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiFrame::InternalSwap(MultiFrame* other) {
  using std::swap;
  CastToBase(&frame_)->InternalSwap(CastToBase(&other->frame_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiFrame::GetMetadata() const {
  protobuf_transform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace transform
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Point* Arena::CreateMaybeMessage< ::transform::proto::Point >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Ped_Point* Arena::CreateMaybeMessage< ::transform::proto::Ped_Point >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Ped_Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Point2i* Arena::CreateMaybeMessage< ::transform::proto::Point2i >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Point2i >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Rect* Arena::CreateMaybeMessage< ::transform::proto::Rect >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Rect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Tire_Line_Rect* Arena::CreateMaybeMessage< ::transform::proto::Tire_Line_Rect >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Tire_Line_Rect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Size2f* Arena::CreateMaybeMessage< ::transform::proto::Size2f >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Size2f >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Image* Arena::CreateMaybeMessage< ::transform::proto::Image >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Image >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Can* Arena::CreateMaybeMessage< ::transform::proto::Can >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Can >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::CarCanInfo* Arena::CreateMaybeMessage< ::transform::proto::CarCanInfo >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::CarCanInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::CaliInfo* Arena::CreateMaybeMessage< ::transform::proto::CaliInfo >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::CaliInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Object* Arena::CreateMaybeMessage< ::transform::proto::Object >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Object >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Ped* Arena::CreateMaybeMessage< ::transform::proto::Ped >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Ped >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::LaneOrigin* Arena::CreateMaybeMessage< ::transform::proto::LaneOrigin >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::LaneOrigin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Lane* Arena::CreateMaybeMessage< ::transform::proto::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Lane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Header* Arena::CreateMaybeMessage< ::transform::proto::Header >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::Frame* Arena::CreateMaybeMessage< ::transform::proto::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::Frame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::transform::proto::MultiFrame* Arena::CreateMaybeMessage< ::transform::proto::MultiFrame >(Arena* arena) {
  return Arena::CreateInternal< ::transform::proto::MultiFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
