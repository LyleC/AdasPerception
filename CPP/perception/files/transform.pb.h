// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#ifndef PROTOBUF_INCLUDED_transform_2eproto
#define PROTOBUF_INCLUDED_transform_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transform_2eproto 

namespace protobuf_transform_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transform_2eproto
namespace transform {
namespace proto {
class CaliInfo;
class CaliInfoDefaultTypeInternal;
extern CaliInfoDefaultTypeInternal _CaliInfo_default_instance_;
class Can;
class CanDefaultTypeInternal;
extern CanDefaultTypeInternal _Can_default_instance_;
class CarCanInfo;
class CarCanInfoDefaultTypeInternal;
extern CarCanInfoDefaultTypeInternal _CarCanInfo_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Lane;
class LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class LaneOrigin;
class LaneOriginDefaultTypeInternal;
extern LaneOriginDefaultTypeInternal _LaneOrigin_default_instance_;
class MultiFrame;
class MultiFrameDefaultTypeInternal;
extern MultiFrameDefaultTypeInternal _MultiFrame_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Ped;
class PedDefaultTypeInternal;
extern PedDefaultTypeInternal _Ped_default_instance_;
class Ped_Point;
class Ped_PointDefaultTypeInternal;
extern Ped_PointDefaultTypeInternal _Ped_Point_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Point2i;
class Point2iDefaultTypeInternal;
extern Point2iDefaultTypeInternal _Point2i_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Size2f;
class Size2fDefaultTypeInternal;
extern Size2fDefaultTypeInternal _Size2f_default_instance_;
class Tire_Line_Rect;
class Tire_Line_RectDefaultTypeInternal;
extern Tire_Line_RectDefaultTypeInternal _Tire_Line_Rect_default_instance_;
}  // namespace proto
}  // namespace transform
namespace google {
namespace protobuf {
template<> ::transform::proto::CaliInfo* Arena::CreateMaybeMessage<::transform::proto::CaliInfo>(Arena*);
template<> ::transform::proto::Can* Arena::CreateMaybeMessage<::transform::proto::Can>(Arena*);
template<> ::transform::proto::CarCanInfo* Arena::CreateMaybeMessage<::transform::proto::CarCanInfo>(Arena*);
template<> ::transform::proto::Frame* Arena::CreateMaybeMessage<::transform::proto::Frame>(Arena*);
template<> ::transform::proto::Header* Arena::CreateMaybeMessage<::transform::proto::Header>(Arena*);
template<> ::transform::proto::Image* Arena::CreateMaybeMessage<::transform::proto::Image>(Arena*);
template<> ::transform::proto::Lane* Arena::CreateMaybeMessage<::transform::proto::Lane>(Arena*);
template<> ::transform::proto::LaneOrigin* Arena::CreateMaybeMessage<::transform::proto::LaneOrigin>(Arena*);
template<> ::transform::proto::MultiFrame* Arena::CreateMaybeMessage<::transform::proto::MultiFrame>(Arena*);
template<> ::transform::proto::Object* Arena::CreateMaybeMessage<::transform::proto::Object>(Arena*);
template<> ::transform::proto::Ped* Arena::CreateMaybeMessage<::transform::proto::Ped>(Arena*);
template<> ::transform::proto::Ped_Point* Arena::CreateMaybeMessage<::transform::proto::Ped_Point>(Arena*);
template<> ::transform::proto::Point* Arena::CreateMaybeMessage<::transform::proto::Point>(Arena*);
template<> ::transform::proto::Point2i* Arena::CreateMaybeMessage<::transform::proto::Point2i>(Arena*);
template<> ::transform::proto::Rect* Arena::CreateMaybeMessage<::transform::proto::Rect>(Arena*);
template<> ::transform::proto::Size2f* Arena::CreateMaybeMessage<::transform::proto::Size2f>(Arena*);
template<> ::transform::proto::Tire_Line_Rect* Arena::CreateMaybeMessage<::transform::proto::Tire_Line_Rect>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace transform {
namespace proto {

enum Object_MotionStatus {
  Object_MotionStatus_MOTION_STATUS_UNKNOWN = 0,
  Object_MotionStatus_MOTION_STATUS_PARKED = 1,
  Object_MotionStatus_MOTION_STATUS_STOPPED = 2,
  Object_MotionStatus_MOTION_STATUS_MOVING = 3,
  Object_MotionStatus_MOTION_STATUS_ONCOMING = 4,
  Object_MotionStatus_MOTION_STATUS_CROSSING = 5,
  Object_MotionStatus_Object_MotionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Object_MotionStatus_Object_MotionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Object_MotionStatus_IsValid(int value);
const Object_MotionStatus Object_MotionStatus_MotionStatus_MIN = Object_MotionStatus_MOTION_STATUS_UNKNOWN;
const Object_MotionStatus Object_MotionStatus_MotionStatus_MAX = Object_MotionStatus_MOTION_STATUS_CROSSING;
const int Object_MotionStatus_MotionStatus_ARRAYSIZE = Object_MotionStatus_MotionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_MotionStatus_descriptor();
inline const ::std::string& Object_MotionStatus_Name(Object_MotionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Object_MotionStatus_descriptor(), value);
}
inline bool Object_MotionStatus_Parse(
    const ::std::string& name, Object_MotionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Object_MotionStatus>(
    Object_MotionStatus_descriptor(), name, value);
}
enum Lane_CoordinateType {
  Lane_CoordinateType_COORDINATE_TYPE_IMAGE = 0,
  Lane_CoordinateType_COORDINATE_TYPE_WORLD = 1,
  Lane_CoordinateType_Lane_CoordinateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Lane_CoordinateType_Lane_CoordinateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Lane_CoordinateType_IsValid(int value);
const Lane_CoordinateType Lane_CoordinateType_CoordinateType_MIN = Lane_CoordinateType_COORDINATE_TYPE_IMAGE;
const Lane_CoordinateType Lane_CoordinateType_CoordinateType_MAX = Lane_CoordinateType_COORDINATE_TYPE_WORLD;
const int Lane_CoordinateType_CoordinateType_ARRAYSIZE = Lane_CoordinateType_CoordinateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_CoordinateType_descriptor();
inline const ::std::string& Lane_CoordinateType_Name(Lane_CoordinateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_CoordinateType_descriptor(), value);
}
inline bool Lane_CoordinateType_Parse(
    const ::std::string& name, Lane_CoordinateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_CoordinateType>(
    Lane_CoordinateType_descriptor(), name, value);
}
enum Lane_LineType {
  Lane_LineType_LINE_TYPE_UNDECIDED = 0,
  Lane_LineType_LINE_TYPE_SOLID = 1,
  Lane_LineType_LINE_TYPE_DASHED = 2,
  Lane_LineType_LINE_TYPE_VIRTUAL = 3,
  Lane_LineType_LINE_TYPE_ROAD_EDGE = 4,
  Lane_LineType_LINE_TYPE_BOTTS_DOTS = 5,
  Lane_LineType_Lane_LineType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Lane_LineType_Lane_LineType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Lane_LineType_IsValid(int value);
const Lane_LineType Lane_LineType_LineType_MIN = Lane_LineType_LINE_TYPE_UNDECIDED;
const Lane_LineType Lane_LineType_LineType_MAX = Lane_LineType_LINE_TYPE_BOTTS_DOTS;
const int Lane_LineType_LineType_ARRAYSIZE = Lane_LineType_LineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LineType_descriptor();
inline const ::std::string& Lane_LineType_Name(Lane_LineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LineType_descriptor(), value);
}
inline bool Lane_LineType_Parse(
    const ::std::string& name, Lane_LineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LineType>(
    Lane_LineType_descriptor(), name, value);
}
enum Lane_LineColor {
  Lane_LineColor_LINE_COLOR_UNKNOWN = 0,
  Lane_LineColor_LINE_COLOR_WHITE = 1,
  Lane_LineColor_LINE_COLOR_YELLOW = 2,
  Lane_LineColor_LINE_COLOR_BLUE_GREEN = 3,
  Lane_LineColor_LINE_COLOR_ORANGE_RED = 4,
  Lane_LineColor_Lane_LineColor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Lane_LineColor_Lane_LineColor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Lane_LineColor_IsValid(int value);
const Lane_LineColor Lane_LineColor_LineColor_MIN = Lane_LineColor_LINE_COLOR_UNKNOWN;
const Lane_LineColor Lane_LineColor_LineColor_MAX = Lane_LineColor_LINE_COLOR_ORANGE_RED;
const int Lane_LineColor_LineColor_ARRAYSIZE = Lane_LineColor_LineColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LineColor_descriptor();
inline const ::std::string& Lane_LineColor_Name(Lane_LineColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LineColor_descriptor(), value);
}
inline bool Lane_LineColor_Parse(
    const ::std::string& name, Lane_LineColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LineColor>(
    Lane_LineColor_descriptor(), name, value);
}
enum Region {
  FULL = 0,
  INTERESTING = 1,
  Region_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Region_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Region_IsValid(int value);
const Region Region_MIN = FULL;
const Region Region_MAX = INTERESTING;
const int Region_ARRAYSIZE = Region_MAX + 1;

const ::google::protobuf::EnumDescriptor* Region_descriptor();
inline const ::std::string& Region_Name(Region value) {
  return ::google::protobuf::internal::NameOfEnum(
    Region_descriptor(), value);
}
inline bool Region_Parse(
    const ::std::string& name, Region* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Region>(
    Region_descriptor(), name, value);
}
enum Source {
  ORIGIN = 0,
  PROC = 1,
  Source_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Source_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Source_IsValid(int value);
const Source Source_MIN = ORIGIN;
const Source Source_MAX = PROC;
const int Source_ARRAYSIZE = Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* Source_descriptor();
inline const ::std::string& Source_Name(Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    Source_descriptor(), value);
}
inline bool Source_Parse(
    const ::std::string& name, Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Source>(
    Source_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:transform.proto.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ped_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Ped_Point) */ {
 public:
  Ped_Point();
  virtual ~Ped_Point();

  Ped_Point(const Ped_Point& from);

  inline Ped_Point& operator=(const Ped_Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ped_Point(Ped_Point&& from) noexcept
    : Ped_Point() {
    *this = ::std::move(from);
  }

  inline Ped_Point& operator=(Ped_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ped_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ped_Point* internal_default_instance() {
    return reinterpret_cast<const Ped_Point*>(
               &_Ped_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Ped_Point* other);
  friend void swap(Ped_Point& a, Ped_Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ped_Point* New() const final {
    return CreateMaybeMessage<Ped_Point>(NULL);
  }

  Ped_Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ped_Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ped_Point& from);
  void MergeFrom(const Ped_Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ped_Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double conf1 = 1;
  void clear_conf1();
  static const int kConf1FieldNumber = 1;
  double conf1() const;
  void set_conf1(double value);

  // int64 x1 = 2;
  void clear_x1();
  static const int kX1FieldNumber = 2;
  ::google::protobuf::int64 x1() const;
  void set_x1(::google::protobuf::int64 value);

  // int64 y1 = 3;
  void clear_y1();
  static const int kY1FieldNumber = 3;
  ::google::protobuf::int64 y1() const;
  void set_y1(::google::protobuf::int64 value);

  // double conf2 = 4;
  void clear_conf2();
  static const int kConf2FieldNumber = 4;
  double conf2() const;
  void set_conf2(double value);

  // int64 x2 = 5;
  void clear_x2();
  static const int kX2FieldNumber = 5;
  ::google::protobuf::int64 x2() const;
  void set_x2(::google::protobuf::int64 value);

  // int64 y2 = 6;
  void clear_y2();
  static const int kY2FieldNumber = 6;
  ::google::protobuf::int64 y2() const;
  void set_y2(::google::protobuf::int64 value);

  // double conf3 = 7;
  void clear_conf3();
  static const int kConf3FieldNumber = 7;
  double conf3() const;
  void set_conf3(double value);

  // int64 x3 = 8;
  void clear_x3();
  static const int kX3FieldNumber = 8;
  ::google::protobuf::int64 x3() const;
  void set_x3(::google::protobuf::int64 value);

  // int64 y3 = 9;
  void clear_y3();
  static const int kY3FieldNumber = 9;
  ::google::protobuf::int64 y3() const;
  void set_y3(::google::protobuf::int64 value);

  // double conf4 = 10;
  void clear_conf4();
  static const int kConf4FieldNumber = 10;
  double conf4() const;
  void set_conf4(double value);

  // int64 x4 = 11;
  void clear_x4();
  static const int kX4FieldNumber = 11;
  ::google::protobuf::int64 x4() const;
  void set_x4(::google::protobuf::int64 value);

  // int64 y4 = 12;
  void clear_y4();
  static const int kY4FieldNumber = 12;
  ::google::protobuf::int64 y4() const;
  void set_y4(::google::protobuf::int64 value);

  // double conf5 = 13;
  void clear_conf5();
  static const int kConf5FieldNumber = 13;
  double conf5() const;
  void set_conf5(double value);

  // int64 x5 = 14;
  void clear_x5();
  static const int kX5FieldNumber = 14;
  ::google::protobuf::int64 x5() const;
  void set_x5(::google::protobuf::int64 value);

  // int64 y5 = 15;
  void clear_y5();
  static const int kY5FieldNumber = 15;
  ::google::protobuf::int64 y5() const;
  void set_y5(::google::protobuf::int64 value);

  // double conf6 = 16;
  void clear_conf6();
  static const int kConf6FieldNumber = 16;
  double conf6() const;
  void set_conf6(double value);

  // int64 x6 = 17;
  void clear_x6();
  static const int kX6FieldNumber = 17;
  ::google::protobuf::int64 x6() const;
  void set_x6(::google::protobuf::int64 value);

  // int64 y6 = 18;
  void clear_y6();
  static const int kY6FieldNumber = 18;
  ::google::protobuf::int64 y6() const;
  void set_y6(::google::protobuf::int64 value);

  // double conf7 = 19;
  void clear_conf7();
  static const int kConf7FieldNumber = 19;
  double conf7() const;
  void set_conf7(double value);

  // int64 x7 = 20;
  void clear_x7();
  static const int kX7FieldNumber = 20;
  ::google::protobuf::int64 x7() const;
  void set_x7(::google::protobuf::int64 value);

  // int64 y7 = 21;
  void clear_y7();
  static const int kY7FieldNumber = 21;
  ::google::protobuf::int64 y7() const;
  void set_y7(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transform.proto.Ped_Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double conf1_;
  ::google::protobuf::int64 x1_;
  ::google::protobuf::int64 y1_;
  double conf2_;
  ::google::protobuf::int64 x2_;
  ::google::protobuf::int64 y2_;
  double conf3_;
  ::google::protobuf::int64 x3_;
  ::google::protobuf::int64 y3_;
  double conf4_;
  ::google::protobuf::int64 x4_;
  ::google::protobuf::int64 y4_;
  double conf5_;
  ::google::protobuf::int64 x5_;
  ::google::protobuf::int64 y5_;
  double conf6_;
  ::google::protobuf::int64 x6_;
  ::google::protobuf::int64 y6_;
  double conf7_;
  ::google::protobuf::int64 x7_;
  ::google::protobuf::int64 y7_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point2i : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Point2i) */ {
 public:
  Point2i();
  virtual ~Point2i();

  Point2i(const Point2i& from);

  inline Point2i& operator=(const Point2i& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point2i(Point2i&& from) noexcept
    : Point2i() {
    *this = ::std::move(from);
  }

  inline Point2i& operator=(Point2i&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2i& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2i* internal_default_instance() {
    return reinterpret_cast<const Point2i*>(
               &_Point2i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Point2i* other);
  friend void swap(Point2i& a, Point2i& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2i* New() const final {
    return CreateMaybeMessage<Point2i>(NULL);
  }

  Point2i* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point2i>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point2i& from);
  void MergeFrom(const Point2i& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2i* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int64 x() const;
  void set_x(::google::protobuf::int64 value);

  // int64 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int64 y() const;
  void set_y(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transform.proto.Point2i)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 x_;
  ::google::protobuf::int64 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Rect* other);
  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(NULL);
  }

  Rect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  double width() const;
  void set_width(double value);

  // double height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  double height() const;
  void set_height(double value);

  // @@protoc_insertion_point(class_scope:transform.proto.Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double width_;
  double height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tire_Line_Rect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Tire_Line_Rect) */ {
 public:
  Tire_Line_Rect();
  virtual ~Tire_Line_Rect();

  Tire_Line_Rect(const Tire_Line_Rect& from);

  inline Tire_Line_Rect& operator=(const Tire_Line_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tire_Line_Rect(Tire_Line_Rect&& from) noexcept
    : Tire_Line_Rect() {
    *this = ::std::move(from);
  }

  inline Tire_Line_Rect& operator=(Tire_Line_Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tire_Line_Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tire_Line_Rect* internal_default_instance() {
    return reinterpret_cast<const Tire_Line_Rect*>(
               &_Tire_Line_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Tire_Line_Rect* other);
  friend void swap(Tire_Line_Rect& a, Tire_Line_Rect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tire_Line_Rect* New() const final {
    return CreateMaybeMessage<Tire_Line_Rect>(NULL);
  }

  Tire_Line_Rect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tire_Line_Rect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tire_Line_Rect& from);
  void MergeFrom(const Tire_Line_Rect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tire_Line_Rect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 x1 = 1;
  void clear_x1();
  static const int kX1FieldNumber = 1;
  ::google::protobuf::int64 x1() const;
  void set_x1(::google::protobuf::int64 value);

  // int64 y1 = 2;
  void clear_y1();
  static const int kY1FieldNumber = 2;
  ::google::protobuf::int64 y1() const;
  void set_y1(::google::protobuf::int64 value);

  // int64 x2 = 3;
  void clear_x2();
  static const int kX2FieldNumber = 3;
  ::google::protobuf::int64 x2() const;
  void set_x2(::google::protobuf::int64 value);

  // int64 y2 = 4;
  void clear_y2();
  static const int kY2FieldNumber = 4;
  ::google::protobuf::int64 y2() const;
  void set_y2(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transform.proto.Tire_Line_Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 x1_;
  ::google::protobuf::int64 y1_;
  ::google::protobuf::int64 x2_;
  ::google::protobuf::int64 y2_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Size2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Size2f) */ {
 public:
  Size2f();
  virtual ~Size2f();

  Size2f(const Size2f& from);

  inline Size2f& operator=(const Size2f& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Size2f(Size2f&& from) noexcept
    : Size2f() {
    *this = ::std::move(from);
  }

  inline Size2f& operator=(Size2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Size2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Size2f* internal_default_instance() {
    return reinterpret_cast<const Size2f*>(
               &_Size2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Size2f* other);
  friend void swap(Size2f& a, Size2f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Size2f* New() const final {
    return CreateMaybeMessage<Size2f>(NULL);
  }

  Size2f* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Size2f>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Size2f& from);
  void MergeFrom(const Size2f& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Size2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  double width() const;
  void set_width(double value);

  // double length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // @@protoc_insertion_point(class_scope:transform.proto.Size2f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double width_;
  double length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transform.proto.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Can : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Can) */ {
 public:
  Can();
  virtual ~Can();

  Can(const Can& from);

  inline Can& operator=(const Can& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Can(Can&& from) noexcept
    : Can() {
    *this = ::std::move(from);
  }

  inline Can& operator=(Can&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Can& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Can* internal_default_instance() {
    return reinterpret_cast<const Can*>(
               &_Can_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Can* other);
  friend void swap(Can& a, Can& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Can* New() const final {
    return CreateMaybeMessage<Can>(NULL);
  }

  Can* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Can>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Can& from);
  void MergeFrom(const Can& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Can* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int64 dlc = 2;
  void clear_dlc();
  static const int kDlcFieldNumber = 2;
  ::google::protobuf::int64 dlc() const;
  void set_dlc(::google::protobuf::int64 value);

  // int64 timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 channel = 5;
  void clear_channel();
  static const int kChannelFieldNumber = 5;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transform.proto.Can)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 dlc_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CarCanInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.CarCanInfo) */ {
 public:
  CarCanInfo();
  virtual ~CarCanInfo();

  CarCanInfo(const CarCanInfo& from);

  inline CarCanInfo& operator=(const CarCanInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CarCanInfo(CarCanInfo&& from) noexcept
    : CarCanInfo() {
    *this = ::std::move(from);
  }

  inline CarCanInfo& operator=(CarCanInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CarCanInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarCanInfo* internal_default_instance() {
    return reinterpret_cast<const CarCanInfo*>(
               &_CarCanInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CarCanInfo* other);
  friend void swap(CarCanInfo& a, CarCanInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarCanInfo* New() const final {
    return CreateMaybeMessage<CarCanInfo>(NULL);
  }

  CarCanInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CarCanInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CarCanInfo& from);
  void MergeFrom(const CarCanInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarCanInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double speed = 1;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  double speed() const;
  void set_speed(double value);

  // double yawrate = 2;
  void clear_yawrate();
  static const int kYawrateFieldNumber = 2;
  double yawrate() const;
  void set_yawrate(double value);

  // int32 brake = 3;
  void clear_brake();
  static const int kBrakeFieldNumber = 3;
  ::google::protobuf::int32 brake() const;
  void set_brake(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transform.proto.CarCanInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double speed_;
  double yawrate_;
  ::google::protobuf::int32 brake_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CaliInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.CaliInfo) */ {
 public:
  CaliInfo();
  virtual ~CaliInfo();

  CaliInfo(const CaliInfo& from);

  inline CaliInfo& operator=(const CaliInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CaliInfo(CaliInfo&& from) noexcept
    : CaliInfo() {
    *this = ::std::move(from);
  }

  inline CaliInfo& operator=(CaliInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CaliInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaliInfo* internal_default_instance() {
    return reinterpret_cast<const CaliInfo*>(
               &_CaliInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CaliInfo* other);
  friend void swap(CaliInfo& a, CaliInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CaliInfo* New() const final {
    return CreateMaybeMessage<CaliInfo>(NULL);
  }

  CaliInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CaliInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CaliInfo& from);
  void MergeFrom(const CaliInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaliInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double fx = 1;
  void clear_fx();
  static const int kFxFieldNumber = 1;
  double fx() const;
  void set_fx(double value);

  // double fy = 2;
  void clear_fy();
  static const int kFyFieldNumber = 2;
  double fy() const;
  void set_fy(double value);

  // double cx = 3;
  void clear_cx();
  static const int kCxFieldNumber = 3;
  double cx() const;
  void set_cx(double value);

  // double cy = 4;
  void clear_cy();
  static const int kCyFieldNumber = 4;
  double cy() const;
  void set_cy(double value);

  // double pitch = 5;
  void clear_pitch();
  static const int kPitchFieldNumber = 5;
  double pitch() const;
  void set_pitch(double value);

  // double yaw = 6;
  void clear_yaw();
  static const int kYawFieldNumber = 6;
  double yaw() const;
  void set_yaw(double value);

  // double roll = 7;
  void clear_roll();
  static const int kRollFieldNumber = 7;
  double roll() const;
  void set_roll(double value);

  // double H = 8;
  void clear_h();
  static const int kHFieldNumber = 8;
  double h() const;
  void set_h(double value);

  // double X = 9;
  void clear_x();
  static const int kXFieldNumber = 9;
  double x() const;
  void set_x(double value);

  // double Y = 10;
  void clear_y();
  static const int kYFieldNumber = 10;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:transform.proto.CaliInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double fx_;
  double fy_;
  double cx_;
  double cy_;
  double pitch_;
  double yaw_;
  double roll_;
  double h_;
  double x_;
  double y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(NULL);
  }

  Object* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Object_MotionStatus MotionStatus;
  static const MotionStatus MOTION_STATUS_UNKNOWN =
    Object_MotionStatus_MOTION_STATUS_UNKNOWN;
  static const MotionStatus MOTION_STATUS_PARKED =
    Object_MotionStatus_MOTION_STATUS_PARKED;
  static const MotionStatus MOTION_STATUS_STOPPED =
    Object_MotionStatus_MOTION_STATUS_STOPPED;
  static const MotionStatus MOTION_STATUS_MOVING =
    Object_MotionStatus_MOTION_STATUS_MOVING;
  static const MotionStatus MOTION_STATUS_ONCOMING =
    Object_MotionStatus_MOTION_STATUS_ONCOMING;
  static const MotionStatus MOTION_STATUS_CROSSING =
    Object_MotionStatus_MOTION_STATUS_CROSSING;
  static inline bool MotionStatus_IsValid(int value) {
    return Object_MotionStatus_IsValid(value);
  }
  static const MotionStatus MotionStatus_MIN =
    Object_MotionStatus_MotionStatus_MIN;
  static const MotionStatus MotionStatus_MAX =
    Object_MotionStatus_MotionStatus_MAX;
  static const int MotionStatus_ARRAYSIZE =
    Object_MotionStatus_MotionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotionStatus_descriptor() {
    return Object_MotionStatus_descriptor();
  }
  static inline const ::std::string& MotionStatus_Name(MotionStatus value) {
    return Object_MotionStatus_Name(value);
  }
  static inline bool MotionStatus_Parse(const ::std::string& name,
      MotionStatus* value) {
    return Object_MotionStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string class_name = 4;
  void clear_class_name();
  static const int kClassNameFieldNumber = 4;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  #if LANG_CXX11
  void set_class_name(::std::string&& value);
  #endif
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // string subclass_name = 6;
  void clear_subclass_name();
  static const int kSubclassNameFieldNumber = 6;
  const ::std::string& subclass_name() const;
  void set_subclass_name(const ::std::string& value);
  #if LANG_CXX11
  void set_subclass_name(::std::string&& value);
  #endif
  void set_subclass_name(const char* value);
  void set_subclass_name(const char* value, size_t size);
  ::std::string* mutable_subclass_name();
  ::std::string* release_subclass_name();
  void set_allocated_subclass_name(::std::string* subclass_name);

  // .transform.proto.Rect bbox = 8;
  bool has_bbox() const;
  void clear_bbox();
  static const int kBboxFieldNumber = 8;
  private:
  const ::transform::proto::Rect& _internal_bbox() const;
  public:
  const ::transform::proto::Rect& bbox() const;
  ::transform::proto::Rect* release_bbox();
  ::transform::proto::Rect* mutable_bbox();
  void set_allocated_bbox(::transform::proto::Rect* bbox);

  // .transform.proto.Rect detail_bbox = 11;
  bool has_detail_bbox() const;
  void clear_detail_bbox();
  static const int kDetailBboxFieldNumber = 11;
  private:
  const ::transform::proto::Rect& _internal_detail_bbox() const;
  public:
  const ::transform::proto::Rect& detail_bbox() const;
  ::transform::proto::Rect* release_detail_bbox();
  ::transform::proto::Rect* mutable_detail_bbox();
  void set_allocated_detail_bbox(::transform::proto::Rect* detail_bbox);

  // .transform.proto.Tire_Line_Rect tire_line = 14;
  bool has_tire_line() const;
  void clear_tire_line();
  static const int kTireLineFieldNumber = 14;
  private:
  const ::transform::proto::Tire_Line_Rect& _internal_tire_line() const;
  public:
  const ::transform::proto::Tire_Line_Rect& tire_line() const;
  ::transform::proto::Tire_Line_Rect* release_tire_line();
  ::transform::proto::Tire_Line_Rect* mutable_tire_line();
  void set_allocated_tire_line(::transform::proto::Tire_Line_Rect* tire_line);

  // .transform.proto.Point distance = 20;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 20;
  private:
  const ::transform::proto::Point& _internal_distance() const;
  public:
  const ::transform::proto::Point& distance() const;
  ::transform::proto::Point* release_distance();
  ::transform::proto::Point* mutable_distance();
  void set_allocated_distance(::transform::proto::Point* distance);

  // .transform.proto.Point relative_velocity = 21;
  bool has_relative_velocity() const;
  void clear_relative_velocity();
  static const int kRelativeVelocityFieldNumber = 21;
  private:
  const ::transform::proto::Point& _internal_relative_velocity() const;
  public:
  const ::transform::proto::Point& relative_velocity() const;
  ::transform::proto::Point* release_relative_velocity();
  ::transform::proto::Point* mutable_relative_velocity();
  void set_allocated_relative_velocity(::transform::proto::Point* relative_velocity);

  // .transform.proto.Point relative_acceleration = 22;
  bool has_relative_acceleration() const;
  void clear_relative_acceleration();
  static const int kRelativeAccelerationFieldNumber = 22;
  private:
  const ::transform::proto::Point& _internal_relative_acceleration() const;
  public:
  const ::transform::proto::Point& relative_acceleration() const;
  ::transform::proto::Point* release_relative_acceleration();
  ::transform::proto::Point* mutable_relative_acceleration();
  void set_allocated_relative_acceleration(::transform::proto::Point* relative_acceleration);

  // int64 camera_type = 1;
  void clear_camera_type();
  static const int kCameraTypeFieldNumber = 1;
  ::google::protobuf::int64 camera_type() const;
  void set_camera_type(::google::protobuf::int64 value);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int64 class_ = 3;
  void clear_class_();
  static const int kClassFieldNumber = 3;
  ::google::protobuf::int64 class_() const;
  void set_class_(::google::protobuf::int64 value);

  // int64 subclass = 5;
  void clear_subclass();
  static const int kSubclassFieldNumber = 5;
  ::google::protobuf::int64 subclass() const;
  void set_subclass(::google::protobuf::int64 value);

  // double confidence = 7;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 7;
  double confidence() const;
  void set_confidence(double value);

  // int64 detail_class = 9;
  void clear_detail_class();
  static const int kDetailClassFieldNumber = 9;
  ::google::protobuf::int64 detail_class() const;
  void set_detail_class(::google::protobuf::int64 value);

  // double detail_conf = 10;
  void clear_detail_conf();
  static const int kDetailConfFieldNumber = 10;
  double detail_conf() const;
  void set_detail_conf(double value);

  // int64 viewpoint = 12;
  void clear_viewpoint();
  static const int kViewpointFieldNumber = 12;
  ::google::protobuf::int64 viewpoint() const;
  void set_viewpoint(::google::protobuf::int64 value);

  // int64 side_ratio = 13;
  void clear_side_ratio();
  static const int kSideRatioFieldNumber = 13;
  ::google::protobuf::int64 side_ratio() const;
  void set_side_ratio(::google::protobuf::int64 value);

  // int64 life_time = 15;
  void clear_life_time();
  static const int kLifeTimeFieldNumber = 15;
  ::google::protobuf::int64 life_time() const;
  void set_life_time(::google::protobuf::int64 value);

  // int64 timestamp = 16;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 16;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // double height = 17;
  void clear_height();
  static const int kHeightFieldNumber = 17;
  double height() const;
  void set_height(double value);

  // double width = 18;
  void clear_width();
  static const int kWidthFieldNumber = 18;
  double width() const;
  void set_width(double value);

  // double length = 19;
  void clear_length();
  static const int kLengthFieldNumber = 19;
  double length() const;
  void set_length(double value);

  // double ttc = 23;
  void clear_ttc();
  static const int kTtcFieldNumber = 23;
  double ttc() const;
  void set_ttc(double value);

  // double thw = 24;
  void clear_thw();
  static const int kThwFieldNumber = 24;
  double thw() const;
  void set_thw(double value);

  // double angle_left = 25;
  void clear_angle_left();
  static const int kAngleLeftFieldNumber = 25;
  double angle_left() const;
  void set_angle_left(double value);

  // double angle_right = 26;
  void clear_angle_right();
  static const int kAngleRightFieldNumber = 26;
  double angle_right() const;
  void set_angle_right(double value);

  // double yaw_angle = 27;
  void clear_yaw_angle();
  static const int kYawAngleFieldNumber = 27;
  double yaw_angle() const;
  void set_yaw_angle(double value);

  // int64 cipv = 29;
  void clear_cipv();
  static const int kCipvFieldNumber = 29;
  ::google::protobuf::int64 cipv() const;
  void set_cipv(::google::protobuf::int64 value);

  // .transform.proto.Object.MotionStatus motion_status = 28;
  void clear_motion_status();
  static const int kMotionStatusFieldNumber = 28;
  ::transform::proto::Object_MotionStatus motion_status() const;
  void set_motion_status(::transform::proto::Object_MotionStatus value);

  // @@protoc_insertion_point(class_scope:transform.proto.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::google::protobuf::internal::ArenaStringPtr subclass_name_;
  ::transform::proto::Rect* bbox_;
  ::transform::proto::Rect* detail_bbox_;
  ::transform::proto::Tire_Line_Rect* tire_line_;
  ::transform::proto::Point* distance_;
  ::transform::proto::Point* relative_velocity_;
  ::transform::proto::Point* relative_acceleration_;
  ::google::protobuf::int64 camera_type_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 class__;
  ::google::protobuf::int64 subclass_;
  double confidence_;
  ::google::protobuf::int64 detail_class_;
  double detail_conf_;
  ::google::protobuf::int64 viewpoint_;
  ::google::protobuf::int64 side_ratio_;
  ::google::protobuf::int64 life_time_;
  ::google::protobuf::int64 timestamp_;
  double height_;
  double width_;
  double length_;
  double ttc_;
  double thw_;
  double angle_left_;
  double angle_right_;
  double yaw_angle_;
  ::google::protobuf::int64 cipv_;
  int motion_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Ped) */ {
 public:
  Ped();
  virtual ~Ped();

  Ped(const Ped& from);

  inline Ped& operator=(const Ped& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ped(Ped&& from) noexcept
    : Ped() {
    *this = ::std::move(from);
  }

  inline Ped& operator=(Ped&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ped* internal_default_instance() {
    return reinterpret_cast<const Ped*>(
               &_Ped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Ped* other);
  friend void swap(Ped& a, Ped& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ped* New() const final {
    return CreateMaybeMessage<Ped>(NULL);
  }

  Ped* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ped>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ped& from);
  void MergeFrom(const Ped& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .transform.proto.Rect bbox = 8;
  bool has_bbox() const;
  void clear_bbox();
  static const int kBboxFieldNumber = 8;
  private:
  const ::transform::proto::Rect& _internal_bbox() const;
  public:
  const ::transform::proto::Rect& bbox() const;
  ::transform::proto::Rect* release_bbox();
  ::transform::proto::Rect* mutable_bbox();
  void set_allocated_bbox(::transform::proto::Rect* bbox);

  // .transform.proto.Ped_Point ppoint = 10;
  bool has_ppoint() const;
  void clear_ppoint();
  static const int kPpointFieldNumber = 10;
  private:
  const ::transform::proto::Ped_Point& _internal_ppoint() const;
  public:
  const ::transform::proto::Ped_Point& ppoint() const;
  ::transform::proto::Ped_Point* release_ppoint();
  ::transform::proto::Ped_Point* mutable_ppoint();
  void set_allocated_ppoint(::transform::proto::Ped_Point* ppoint);

  // .transform.proto.Point distance = 11;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 11;
  private:
  const ::transform::proto::Point& _internal_distance() const;
  public:
  const ::transform::proto::Point& distance() const;
  ::transform::proto::Point* release_distance();
  ::transform::proto::Point* mutable_distance();
  void set_allocated_distance(::transform::proto::Point* distance);

  // .transform.proto.Point relative_velocity = 12;
  bool has_relative_velocity() const;
  void clear_relative_velocity();
  static const int kRelativeVelocityFieldNumber = 12;
  private:
  const ::transform::proto::Point& _internal_relative_velocity() const;
  public:
  const ::transform::proto::Point& relative_velocity() const;
  ::transform::proto::Point* release_relative_velocity();
  ::transform::proto::Point* mutable_relative_velocity();
  void set_allocated_relative_velocity(::transform::proto::Point* relative_velocity);

  // .transform.proto.Point relative_acceleration = 13;
  bool has_relative_acceleration() const;
  void clear_relative_acceleration();
  static const int kRelativeAccelerationFieldNumber = 13;
  private:
  const ::transform::proto::Point& _internal_relative_acceleration() const;
  public:
  const ::transform::proto::Point& relative_acceleration() const;
  ::transform::proto::Point* release_relative_acceleration();
  ::transform::proto::Point* mutable_relative_acceleration();
  void set_allocated_relative_acceleration(::transform::proto::Point* relative_acceleration);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int64 class_ = 3;
  void clear_class_();
  static const int kClassFieldNumber = 3;
  ::google::protobuf::int64 class_() const;
  void set_class_(::google::protobuf::int64 value);

  // double confidence = 7;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 7;
  double confidence() const;
  void set_confidence(double value);

  // double conf2 = 9;
  void clear_conf2();
  static const int kConf2FieldNumber = 9;
  double conf2() const;
  void set_conf2(double value);

  // int64 cipp = 14;
  void clear_cipp();
  static const int kCippFieldNumber = 14;
  ::google::protobuf::int64 cipp() const;
  void set_cipp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transform.proto.Ped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::transform::proto::Rect* bbox_;
  ::transform::proto::Ped_Point* ppoint_;
  ::transform::proto::Point* distance_;
  ::transform::proto::Point* relative_velocity_;
  ::transform::proto::Point* relative_acceleration_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 class__;
  double confidence_;
  double conf2_;
  ::google::protobuf::int64 cipp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneOrigin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.LaneOrigin) */ {
 public:
  LaneOrigin();
  virtual ~LaneOrigin();

  LaneOrigin(const LaneOrigin& from);

  inline LaneOrigin& operator=(const LaneOrigin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneOrigin(LaneOrigin&& from) noexcept
    : LaneOrigin() {
    *this = ::std::move(from);
  }

  inline LaneOrigin& operator=(LaneOrigin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneOrigin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneOrigin* internal_default_instance() {
    return reinterpret_cast<const LaneOrigin*>(
               &_LaneOrigin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(LaneOrigin* other);
  friend void swap(LaneOrigin& a, LaneOrigin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneOrigin* New() const final {
    return CreateMaybeMessage<LaneOrigin>(NULL);
  }

  LaneOrigin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneOrigin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneOrigin& from);
  void MergeFrom(const LaneOrigin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneOrigin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double ex_data = 10;
  int ex_data_size() const;
  void clear_ex_data();
  static const int kExDataFieldNumber = 10;
  double ex_data(int index) const;
  void set_ex_data(int index, double value);
  void add_ex_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      ex_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ex_data();

  // double conf = 1;
  void clear_conf();
  static const int kConfFieldNumber = 1;
  double conf() const;
  void set_conf(double value);

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // double z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  double z() const;
  void set_z(double value);

  // double k = 6;
  void clear_k();
  static const int kKFieldNumber = 6;
  double k() const;
  void set_k(double value);

  // double f1 = 7;
  void clear_f1();
  static const int kF1FieldNumber = 7;
  double f1() const;
  void set_f1(double value);

  // double f2 = 8;
  void clear_f2();
  static const int kF2FieldNumber = 8;
  double f2() const;
  void set_f2(double value);

  // int32 tps = 5;
  void clear_tps();
  static const int kTpsFieldNumber = 5;
  ::google::protobuf::int32 tps() const;
  void set_tps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transform.proto.LaneOrigin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > ex_data_;
  mutable int _ex_data_cached_byte_size_;
  double conf_;
  double x_;
  double y_;
  double z_;
  double k_;
  double f1_;
  double f2_;
  ::google::protobuf::int32 tps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Lane) */ {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lane(Lane&& from) noexcept
    : Lane() {
    *this = ::std::move(from);
  }

  inline Lane& operator=(Lane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Lane* other);
  friend void swap(Lane& a, Lane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lane* New() const final {
    return CreateMaybeMessage<Lane>(NULL);
  }

  Lane* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lane>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Lane_CoordinateType CoordinateType;
  static const CoordinateType COORDINATE_TYPE_IMAGE =
    Lane_CoordinateType_COORDINATE_TYPE_IMAGE;
  static const CoordinateType COORDINATE_TYPE_WORLD =
    Lane_CoordinateType_COORDINATE_TYPE_WORLD;
  static inline bool CoordinateType_IsValid(int value) {
    return Lane_CoordinateType_IsValid(value);
  }
  static const CoordinateType CoordinateType_MIN =
    Lane_CoordinateType_CoordinateType_MIN;
  static const CoordinateType CoordinateType_MAX =
    Lane_CoordinateType_CoordinateType_MAX;
  static const int CoordinateType_ARRAYSIZE =
    Lane_CoordinateType_CoordinateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoordinateType_descriptor() {
    return Lane_CoordinateType_descriptor();
  }
  static inline const ::std::string& CoordinateType_Name(CoordinateType value) {
    return Lane_CoordinateType_Name(value);
  }
  static inline bool CoordinateType_Parse(const ::std::string& name,
      CoordinateType* value) {
    return Lane_CoordinateType_Parse(name, value);
  }

  typedef Lane_LineType LineType;
  static const LineType LINE_TYPE_UNDECIDED =
    Lane_LineType_LINE_TYPE_UNDECIDED;
  static const LineType LINE_TYPE_SOLID =
    Lane_LineType_LINE_TYPE_SOLID;
  static const LineType LINE_TYPE_DASHED =
    Lane_LineType_LINE_TYPE_DASHED;
  static const LineType LINE_TYPE_VIRTUAL =
    Lane_LineType_LINE_TYPE_VIRTUAL;
  static const LineType LINE_TYPE_ROAD_EDGE =
    Lane_LineType_LINE_TYPE_ROAD_EDGE;
  static const LineType LINE_TYPE_BOTTS_DOTS =
    Lane_LineType_LINE_TYPE_BOTTS_DOTS;
  static inline bool LineType_IsValid(int value) {
    return Lane_LineType_IsValid(value);
  }
  static const LineType LineType_MIN =
    Lane_LineType_LineType_MIN;
  static const LineType LineType_MAX =
    Lane_LineType_LineType_MAX;
  static const int LineType_ARRAYSIZE =
    Lane_LineType_LineType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LineType_descriptor() {
    return Lane_LineType_descriptor();
  }
  static inline const ::std::string& LineType_Name(LineType value) {
    return Lane_LineType_Name(value);
  }
  static inline bool LineType_Parse(const ::std::string& name,
      LineType* value) {
    return Lane_LineType_Parse(name, value);
  }

  typedef Lane_LineColor LineColor;
  static const LineColor LINE_COLOR_UNKNOWN =
    Lane_LineColor_LINE_COLOR_UNKNOWN;
  static const LineColor LINE_COLOR_WHITE =
    Lane_LineColor_LINE_COLOR_WHITE;
  static const LineColor LINE_COLOR_YELLOW =
    Lane_LineColor_LINE_COLOR_YELLOW;
  static const LineColor LINE_COLOR_BLUE_GREEN =
    Lane_LineColor_LINE_COLOR_BLUE_GREEN;
  static const LineColor LINE_COLOR_ORANGE_RED =
    Lane_LineColor_LINE_COLOR_ORANGE_RED;
  static inline bool LineColor_IsValid(int value) {
    return Lane_LineColor_IsValid(value);
  }
  static const LineColor LineColor_MIN =
    Lane_LineColor_LineColor_MIN;
  static const LineColor LineColor_MAX =
    Lane_LineColor_LineColor_MAX;
  static const int LineColor_ARRAYSIZE =
    Lane_LineColor_LineColor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LineColor_descriptor() {
    return Lane_LineColor_descriptor();
  }
  static inline const ::std::string& LineColor_Name(LineColor value) {
    return Lane_LineColor_Name(value);
  }
  static inline bool LineColor_Parse(const ::std::string& name,
      LineColor* value) {
    return Lane_LineColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .transform.proto.Point image_points = 13;
  int image_points_size() const;
  void clear_image_points();
  static const int kImagePointsFieldNumber = 13;
  ::transform::proto::Point* mutable_image_points(int index);
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Point >*
      mutable_image_points();
  const ::transform::proto::Point& image_points(int index) const;
  ::transform::proto::Point* add_image_points();
  const ::google::protobuf::RepeatedPtrField< ::transform::proto::Point >&
      image_points() const;

  // repeated .transform.proto.LaneOrigin lane_origin = 14;
  int lane_origin_size() const;
  void clear_lane_origin();
  static const int kLaneOriginFieldNumber = 14;
  ::transform::proto::LaneOrigin* mutable_lane_origin(int index);
  ::google::protobuf::RepeatedPtrField< ::transform::proto::LaneOrigin >*
      mutable_lane_origin();
  const ::transform::proto::LaneOrigin& lane_origin(int index) const;
  ::transform::proto::LaneOrigin* add_lane_origin();
  const ::google::protobuf::RepeatedPtrField< ::transform::proto::LaneOrigin >&
      lane_origin() const;

  // .transform.proto.Point start = 10;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 10;
  private:
  const ::transform::proto::Point& _internal_start() const;
  public:
  const ::transform::proto::Point& start() const;
  ::transform::proto::Point* release_start();
  ::transform::proto::Point* mutable_start();
  void set_allocated_start(::transform::proto::Point* start);

  // .transform.proto.Point end = 11;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 11;
  private:
  const ::transform::proto::Point& _internal_end() const;
  public:
  const ::transform::proto::Point& end() const;
  ::transform::proto::Point* release_end();
  ::transform::proto::Point* mutable_end();
  void set_allocated_end(::transform::proto::Point* end);

  // .transform.proto.CaliInfo cali_info = 19;
  bool has_cali_info() const;
  void clear_cali_info();
  static const int kCaliInfoFieldNumber = 19;
  private:
  const ::transform::proto::CaliInfo& _internal_cali_info() const;
  public:
  const ::transform::proto::CaliInfo& cali_info() const;
  ::transform::proto::CaliInfo* release_cali_info();
  ::transform::proto::CaliInfo* mutable_cali_info();
  void set_allocated_cali_info(::transform::proto::CaliInfo* cali_info);

  // double C0 = 2;
  void clear_c0();
  static const int kC0FieldNumber = 2;
  double c0() const;
  void set_c0(double value);

  // double C1 = 3;
  void clear_c1();
  static const int kC1FieldNumber = 3;
  double c1() const;
  void set_c1(double value);

  // double C2 = 4;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  double c2() const;
  void set_c2(double value);

  // .transform.proto.Lane.CoordinateType coordinate_type = 1;
  void clear_coordinate_type();
  static const int kCoordinateTypeFieldNumber = 1;
  ::transform::proto::Lane_CoordinateType coordinate_type() const;
  void set_coordinate_type(::transform::proto::Lane_CoordinateType value);

  // .transform.proto.Lane.LineType line_type = 8;
  void clear_line_type();
  static const int kLineTypeFieldNumber = 8;
  ::transform::proto::Lane_LineType line_type() const;
  void set_line_type(::transform::proto::Lane_LineType value);

  // double C3 = 5;
  void clear_c3();
  static const int kC3FieldNumber = 5;
  double c3() const;
  void set_c3(double value);

  // int64 index = 6;
  void clear_index();
  static const int kIndexFieldNumber = 6;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // int64 quality = 7;
  void clear_quality();
  static const int kQualityFieldNumber = 7;
  ::google::protobuf::int64 quality() const;
  void set_quality(::google::protobuf::int64 value);

  // double distance_to_host = 12;
  void clear_distance_to_host();
  static const int kDistanceToHostFieldNumber = 12;
  double distance_to_host() const;
  void set_distance_to_host(double value);

  // double width = 16;
  void clear_width();
  static const int kWidthFieldNumber = 16;
  double width() const;
  void set_width(double value);

  // int64 line_id = 17;
  void clear_line_id();
  static const int kLineIdFieldNumber = 17;
  ::google::protobuf::int64 line_id() const;
  void set_line_id(::google::protobuf::int64 value);

  // int64 camera_index = 18;
  void clear_camera_index();
  static const int kCameraIndexFieldNumber = 18;
  ::google::protobuf::int64 camera_index() const;
  void set_camera_index(::google::protobuf::int64 value);

  // .transform.proto.Lane.LineColor line_color = 9;
  void clear_line_color();
  static const int kLineColorFieldNumber = 9;
  ::transform::proto::Lane_LineColor line_color() const;
  void set_line_color(::transform::proto::Lane_LineColor value);

  // @@protoc_insertion_point(class_scope:transform.proto.Lane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Point > image_points_;
  ::google::protobuf::RepeatedPtrField< ::transform::proto::LaneOrigin > lane_origin_;
  ::transform::proto::Point* start_;
  ::transform::proto::Point* end_;
  ::transform::proto::CaliInfo* cali_info_;
  double c0_;
  double c1_;
  double c2_;
  int coordinate_type_;
  int line_type_;
  double c3_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int64 quality_;
  double distance_to_host_;
  double width_;
  ::google::protobuf::int64 line_id_;
  ::google::protobuf::int64 camera_index_;
  int line_color_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serial_number = 1;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // string protocol_version = 2;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 2;
  const ::std::string& protocol_version() const;
  void set_protocol_version(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol_version(::std::string&& value);
  #endif
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  ::std::string* mutable_protocol_version();
  ::std::string* release_protocol_version();
  void set_allocated_protocol_version(::std::string* protocol_version);

  // string hard_version = 3;
  void clear_hard_version();
  static const int kHardVersionFieldNumber = 3;
  const ::std::string& hard_version() const;
  void set_hard_version(const ::std::string& value);
  #if LANG_CXX11
  void set_hard_version(::std::string&& value);
  #endif
  void set_hard_version(const char* value);
  void set_hard_version(const char* value, size_t size);
  ::std::string* mutable_hard_version();
  ::std::string* release_hard_version();
  void set_allocated_hard_version(::std::string* hard_version);

  // string soft_version = 4;
  void clear_soft_version();
  static const int kSoftVersionFieldNumber = 4;
  const ::std::string& soft_version() const;
  void set_soft_version(const ::std::string& value);
  #if LANG_CXX11
  void set_soft_version(::std::string&& value);
  #endif
  void set_soft_version(const char* value);
  void set_soft_version(const char* value, size_t size);
  ::std::string* mutable_soft_version();
  ::std::string* release_soft_version();
  void set_allocated_soft_version(::std::string* soft_version);

  // string car_type = 6;
  void clear_car_type();
  static const int kCarTypeFieldNumber = 6;
  const ::std::string& car_type() const;
  void set_car_type(const ::std::string& value);
  #if LANG_CXX11
  void set_car_type(::std::string&& value);
  #endif
  void set_car_type(const char* value);
  void set_car_type(const char* value, size_t size);
  ::std::string* mutable_car_type();
  ::std::string* release_car_type();
  void set_allocated_car_type(::std::string* car_type);

  // bytes tsintel_config = 7;
  void clear_tsintel_config();
  static const int kTsintelConfigFieldNumber = 7;
  const ::std::string& tsintel_config() const;
  void set_tsintel_config(const ::std::string& value);
  #if LANG_CXX11
  void set_tsintel_config(::std::string&& value);
  #endif
  void set_tsintel_config(const char* value);
  void set_tsintel_config(const void* value, size_t size);
  ::std::string* mutable_tsintel_config();
  ::std::string* release_tsintel_config();
  void set_allocated_tsintel_config(::std::string* tsintel_config);

  // string run_mode = 8;
  void clear_run_mode();
  static const int kRunModeFieldNumber = 8;
  const ::std::string& run_mode() const;
  void set_run_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_run_mode(::std::string&& value);
  #endif
  void set_run_mode(const char* value);
  void set_run_mode(const char* value, size_t size);
  ::std::string* mutable_run_mode();
  ::std::string* release_run_mode();
  void set_allocated_run_mode(::std::string* run_mode);

  // string object_version = 9;
  void clear_object_version();
  static const int kObjectVersionFieldNumber = 9;
  const ::std::string& object_version() const;
  void set_object_version(const ::std::string& value);
  #if LANG_CXX11
  void set_object_version(::std::string&& value);
  #endif
  void set_object_version(const char* value);
  void set_object_version(const char* value, size_t size);
  ::std::string* mutable_object_version();
  ::std::string* release_object_version();
  void set_allocated_object_version(::std::string* object_version);

  // int64 image_format = 5;
  void clear_image_format();
  static const int kImageFormatFieldNumber = 5;
  ::google::protobuf::int64 image_format() const;
  void set_image_format(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transform.proto.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr protocol_version_;
  ::google::protobuf::internal::ArenaStringPtr hard_version_;
  ::google::protobuf::internal::ArenaStringPtr soft_version_;
  ::google::protobuf::internal::ArenaStringPtr car_type_;
  ::google::protobuf::internal::ArenaStringPtr tsintel_config_;
  ::google::protobuf::internal::ArenaStringPtr run_mode_;
  ::google::protobuf::internal::ArenaStringPtr object_version_;
  ::google::protobuf::int64 image_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transform.proto.Can raw_can = 3;
  int raw_can_size() const;
  void clear_raw_can();
  static const int kRawCanFieldNumber = 3;
  ::transform::proto::Can* mutable_raw_can(int index);
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Can >*
      mutable_raw_can();
  const ::transform::proto::Can& raw_can(int index) const;
  ::transform::proto::Can* add_raw_can();
  const ::google::protobuf::RepeatedPtrField< ::transform::proto::Can >&
      raw_can() const;

  // repeated .transform.proto.Object object = 4;
  int object_size() const;
  void clear_object();
  static const int kObjectFieldNumber = 4;
  ::transform::proto::Object* mutable_object(int index);
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Object >*
      mutable_object();
  const ::transform::proto::Object& object(int index) const;
  ::transform::proto::Object* add_object();
  const ::google::protobuf::RepeatedPtrField< ::transform::proto::Object >&
      object() const;

  // repeated .transform.proto.Ped ped = 5;
  int ped_size() const;
  void clear_ped();
  static const int kPedFieldNumber = 5;
  ::transform::proto::Ped* mutable_ped(int index);
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Ped >*
      mutable_ped();
  const ::transform::proto::Ped& ped(int index) const;
  ::transform::proto::Ped* add_ped();
  const ::google::protobuf::RepeatedPtrField< ::transform::proto::Ped >&
      ped() const;

  // repeated .transform.proto.Lane lane = 6;
  int lane_size() const;
  void clear_lane();
  static const int kLaneFieldNumber = 6;
  ::transform::proto::Lane* mutable_lane(int index);
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Lane >*
      mutable_lane();
  const ::transform::proto::Lane& lane(int index) const;
  ::transform::proto::Lane* add_lane();
  const ::google::protobuf::RepeatedPtrField< ::transform::proto::Lane >&
      lane() const;

  // .transform.proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::transform::proto::Header& _internal_header() const;
  public:
  const ::transform::proto::Header& header() const;
  ::transform::proto::Header* release_header();
  ::transform::proto::Header* mutable_header();
  void set_allocated_header(::transform::proto::Header* header);

  // .transform.proto.Image raw_image = 16;
  bool has_raw_image() const;
  void clear_raw_image();
  static const int kRawImageFieldNumber = 16;
  private:
  const ::transform::proto::Image& _internal_raw_image() const;
  public:
  const ::transform::proto::Image& raw_image() const;
  ::transform::proto::Image* release_raw_image();
  ::transform::proto::Image* mutable_raw_image();
  void set_allocated_raw_image(::transform::proto::Image* raw_image);

  // .transform.proto.CarCanInfo car_info = 17;
  bool has_car_info() const;
  void clear_car_info();
  static const int kCarInfoFieldNumber = 17;
  private:
  const ::transform::proto::CarCanInfo& _internal_car_info() const;
  public:
  const ::transform::proto::CarCanInfo& car_info() const;
  ::transform::proto::CarCanInfo* release_car_info();
  ::transform::proto::CarCanInfo* mutable_car_info();
  void set_allocated_car_info(::transform::proto::CarCanInfo* car_info);

  // .transform.proto.Rect lane_crop = 18;
  bool has_lane_crop() const;
  void clear_lane_crop();
  static const int kLaneCropFieldNumber = 18;
  private:
  const ::transform::proto::Rect& _internal_lane_crop() const;
  public:
  const ::transform::proto::Rect& lane_crop() const;
  ::transform::proto::Rect* release_lane_crop();
  ::transform::proto::Rect* mutable_lane_crop();
  void set_allocated_lane_crop(::transform::proto::Rect* lane_crop);

  // .transform.proto.Rect object_crop = 19;
  bool has_object_crop() const;
  void clear_object_crop();
  static const int kObjectCropFieldNumber = 19;
  private:
  const ::transform::proto::Rect& _internal_object_crop() const;
  public:
  const ::transform::proto::Rect& object_crop() const;
  ::transform::proto::Rect* release_object_crop();
  ::transform::proto::Rect* mutable_object_crop();
  void set_allocated_object_crop(::transform::proto::Rect* object_crop);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int64 cipv_id = 7;
  void clear_cipv_id();
  static const int kCipvIdFieldNumber = 7;
  ::google::protobuf::int64 cipv_id() const;
  void set_cipv_id(::google::protobuf::int64 value);

  // int64 ldw_status = 8;
  void clear_ldw_status();
  static const int kLdwStatusFieldNumber = 8;
  ::google::protobuf::int64 ldw_status() const;
  void set_ldw_status(::google::protobuf::int64 value);

  // int64 fcw_status = 9;
  void clear_fcw_status();
  static const int kFcwStatusFieldNumber = 9;
  ::google::protobuf::int64 fcw_status() const;
  void set_fcw_status(::google::protobuf::int64 value);

  // int64 pcw_status = 10;
  void clear_pcw_status();
  static const int kPcwStatusFieldNumber = 10;
  ::google::protobuf::int64 pcw_status() const;
  void set_pcw_status(::google::protobuf::int64 value);

  // int64 asw_status = 11;
  void clear_asw_status();
  static const int kAswStatusFieldNumber = 11;
  ::google::protobuf::int64 asw_status() const;
  void set_asw_status(::google::protobuf::int64 value);

  // int64 bsd_status = 12;
  void clear_bsd_status();
  static const int kBsdStatusFieldNumber = 12;
  ::google::protobuf::int64 bsd_status() const;
  void set_bsd_status(::google::protobuf::int64 value);

  // int64 lane_number = 13;
  void clear_lane_number();
  static const int kLaneNumberFieldNumber = 13;
  ::google::protobuf::int64 lane_number() const;
  void set_lane_number(::google::protobuf::int64 value);

  // double ttlc = 14;
  void clear_ttlc();
  static const int kTtlcFieldNumber = 14;
  double ttlc() const;
  void set_ttlc(double value);

  // int64 timestamp = 15;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int64 shutter = 20;
  void clear_shutter();
  static const int kShutterFieldNumber = 20;
  ::google::protobuf::int64 shutter() const;
  void set_shutter(::google::protobuf::int64 value);

  // .transform.proto.Region region = 21;
  void clear_region();
  static const int kRegionFieldNumber = 21;
  ::transform::proto::Region region() const;
  void set_region(::transform::proto::Region value);

  // .transform.proto.Source source = 22;
  void clear_source();
  static const int kSourceFieldNumber = 22;
  ::transform::proto::Source source() const;
  void set_source(::transform::proto::Source value);

  // @@protoc_insertion_point(class_scope:transform.proto.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Can > raw_can_;
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Object > object_;
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Ped > ped_;
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Lane > lane_;
  ::transform::proto::Header* header_;
  ::transform::proto::Image* raw_image_;
  ::transform::proto::CarCanInfo* car_info_;
  ::transform::proto::Rect* lane_crop_;
  ::transform::proto::Rect* object_crop_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 cipv_id_;
  ::google::protobuf::int64 ldw_status_;
  ::google::protobuf::int64 fcw_status_;
  ::google::protobuf::int64 pcw_status_;
  ::google::protobuf::int64 asw_status_;
  ::google::protobuf::int64 bsd_status_;
  ::google::protobuf::int64 lane_number_;
  double ttlc_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 shutter_;
  int region_;
  int source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transform.proto.MultiFrame) */ {
 public:
  MultiFrame();
  virtual ~MultiFrame();

  MultiFrame(const MultiFrame& from);

  inline MultiFrame& operator=(const MultiFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiFrame(MultiFrame&& from) noexcept
    : MultiFrame() {
    *this = ::std::move(from);
  }

  inline MultiFrame& operator=(MultiFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiFrame* internal_default_instance() {
    return reinterpret_cast<const MultiFrame*>(
               &_MultiFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(MultiFrame* other);
  friend void swap(MultiFrame& a, MultiFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiFrame* New() const final {
    return CreateMaybeMessage<MultiFrame>(NULL);
  }

  MultiFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MultiFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MultiFrame& from);
  void MergeFrom(const MultiFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transform.proto.Frame frame = 1;
  int frame_size() const;
  void clear_frame();
  static const int kFrameFieldNumber = 1;
  ::transform::proto::Frame* mutable_frame(int index);
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Frame >*
      mutable_frame();
  const ::transform::proto::Frame& frame(int index) const;
  ::transform::proto::Frame* add_frame();
  const ::google::protobuf::RepeatedPtrField< ::transform::proto::Frame >&
      frame() const;

  // @@protoc_insertion_point(class_scope:transform.proto.MultiFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::transform::proto::Frame > frame_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transform_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:transform.proto.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:transform.proto.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Point.y)
}

// double z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:transform.proto.Point.z)
  return z_;
}
inline void Point::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Point.z)
}

// -------------------------------------------------------------------

// Ped_Point

// double conf1 = 1;
inline void Ped_Point::clear_conf1() {
  conf1_ = 0;
}
inline double Ped_Point::conf1() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.conf1)
  return conf1_;
}
inline void Ped_Point::set_conf1(double value) {
  
  conf1_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.conf1)
}

// int64 x1 = 2;
inline void Ped_Point::clear_x1() {
  x1_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::x1() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.x1)
  return x1_;
}
inline void Ped_Point::set_x1(::google::protobuf::int64 value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.x1)
}

// int64 y1 = 3;
inline void Ped_Point::clear_y1() {
  y1_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::y1() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.y1)
  return y1_;
}
inline void Ped_Point::set_y1(::google::protobuf::int64 value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.y1)
}

// double conf2 = 4;
inline void Ped_Point::clear_conf2() {
  conf2_ = 0;
}
inline double Ped_Point::conf2() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.conf2)
  return conf2_;
}
inline void Ped_Point::set_conf2(double value) {
  
  conf2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.conf2)
}

// int64 x2 = 5;
inline void Ped_Point::clear_x2() {
  x2_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::x2() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.x2)
  return x2_;
}
inline void Ped_Point::set_x2(::google::protobuf::int64 value) {
  
  x2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.x2)
}

// int64 y2 = 6;
inline void Ped_Point::clear_y2() {
  y2_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::y2() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.y2)
  return y2_;
}
inline void Ped_Point::set_y2(::google::protobuf::int64 value) {
  
  y2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.y2)
}

// double conf3 = 7;
inline void Ped_Point::clear_conf3() {
  conf3_ = 0;
}
inline double Ped_Point::conf3() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.conf3)
  return conf3_;
}
inline void Ped_Point::set_conf3(double value) {
  
  conf3_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.conf3)
}

// int64 x3 = 8;
inline void Ped_Point::clear_x3() {
  x3_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::x3() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.x3)
  return x3_;
}
inline void Ped_Point::set_x3(::google::protobuf::int64 value) {
  
  x3_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.x3)
}

// int64 y3 = 9;
inline void Ped_Point::clear_y3() {
  y3_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::y3() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.y3)
  return y3_;
}
inline void Ped_Point::set_y3(::google::protobuf::int64 value) {
  
  y3_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.y3)
}

// double conf4 = 10;
inline void Ped_Point::clear_conf4() {
  conf4_ = 0;
}
inline double Ped_Point::conf4() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.conf4)
  return conf4_;
}
inline void Ped_Point::set_conf4(double value) {
  
  conf4_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.conf4)
}

// int64 x4 = 11;
inline void Ped_Point::clear_x4() {
  x4_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::x4() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.x4)
  return x4_;
}
inline void Ped_Point::set_x4(::google::protobuf::int64 value) {
  
  x4_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.x4)
}

// int64 y4 = 12;
inline void Ped_Point::clear_y4() {
  y4_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::y4() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.y4)
  return y4_;
}
inline void Ped_Point::set_y4(::google::protobuf::int64 value) {
  
  y4_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.y4)
}

// double conf5 = 13;
inline void Ped_Point::clear_conf5() {
  conf5_ = 0;
}
inline double Ped_Point::conf5() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.conf5)
  return conf5_;
}
inline void Ped_Point::set_conf5(double value) {
  
  conf5_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.conf5)
}

// int64 x5 = 14;
inline void Ped_Point::clear_x5() {
  x5_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::x5() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.x5)
  return x5_;
}
inline void Ped_Point::set_x5(::google::protobuf::int64 value) {
  
  x5_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.x5)
}

// int64 y5 = 15;
inline void Ped_Point::clear_y5() {
  y5_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::y5() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.y5)
  return y5_;
}
inline void Ped_Point::set_y5(::google::protobuf::int64 value) {
  
  y5_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.y5)
}

// double conf6 = 16;
inline void Ped_Point::clear_conf6() {
  conf6_ = 0;
}
inline double Ped_Point::conf6() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.conf6)
  return conf6_;
}
inline void Ped_Point::set_conf6(double value) {
  
  conf6_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.conf6)
}

// int64 x6 = 17;
inline void Ped_Point::clear_x6() {
  x6_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::x6() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.x6)
  return x6_;
}
inline void Ped_Point::set_x6(::google::protobuf::int64 value) {
  
  x6_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.x6)
}

// int64 y6 = 18;
inline void Ped_Point::clear_y6() {
  y6_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::y6() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.y6)
  return y6_;
}
inline void Ped_Point::set_y6(::google::protobuf::int64 value) {
  
  y6_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.y6)
}

// double conf7 = 19;
inline void Ped_Point::clear_conf7() {
  conf7_ = 0;
}
inline double Ped_Point::conf7() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.conf7)
  return conf7_;
}
inline void Ped_Point::set_conf7(double value) {
  
  conf7_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.conf7)
}

// int64 x7 = 20;
inline void Ped_Point::clear_x7() {
  x7_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::x7() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.x7)
  return x7_;
}
inline void Ped_Point::set_x7(::google::protobuf::int64 value) {
  
  x7_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.x7)
}

// int64 y7 = 21;
inline void Ped_Point::clear_y7() {
  y7_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped_Point::y7() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped_Point.y7)
  return y7_;
}
inline void Ped_Point::set_y7(::google::protobuf::int64 value) {
  
  y7_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped_Point.y7)
}

// -------------------------------------------------------------------

// Point2i

// int64 x = 1;
inline void Point2i::clear_x() {
  x_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Point2i::x() const {
  // @@protoc_insertion_point(field_get:transform.proto.Point2i.x)
  return x_;
}
inline void Point2i::set_x(::google::protobuf::int64 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Point2i.x)
}

// int64 y = 2;
inline void Point2i::clear_y() {
  y_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Point2i::y() const {
  // @@protoc_insertion_point(field_get:transform.proto.Point2i.y)
  return y_;
}
inline void Point2i::set_y(::google::protobuf::int64 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Point2i.y)
}

// -------------------------------------------------------------------

// Rect

// double x = 1;
inline void Rect::clear_x() {
  x_ = 0;
}
inline double Rect::x() const {
  // @@protoc_insertion_point(field_get:transform.proto.Rect.x)
  return x_;
}
inline void Rect::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Rect.x)
}

// double y = 2;
inline void Rect::clear_y() {
  y_ = 0;
}
inline double Rect::y() const {
  // @@protoc_insertion_point(field_get:transform.proto.Rect.y)
  return y_;
}
inline void Rect::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Rect.y)
}

// double width = 3;
inline void Rect::clear_width() {
  width_ = 0;
}
inline double Rect::width() const {
  // @@protoc_insertion_point(field_get:transform.proto.Rect.width)
  return width_;
}
inline void Rect::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Rect.width)
}

// double height = 4;
inline void Rect::clear_height() {
  height_ = 0;
}
inline double Rect::height() const {
  // @@protoc_insertion_point(field_get:transform.proto.Rect.height)
  return height_;
}
inline void Rect::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Rect.height)
}

// -------------------------------------------------------------------

// Tire_Line_Rect

// int64 x1 = 1;
inline void Tire_Line_Rect::clear_x1() {
  x1_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tire_Line_Rect::x1() const {
  // @@protoc_insertion_point(field_get:transform.proto.Tire_Line_Rect.x1)
  return x1_;
}
inline void Tire_Line_Rect::set_x1(::google::protobuf::int64 value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Tire_Line_Rect.x1)
}

// int64 y1 = 2;
inline void Tire_Line_Rect::clear_y1() {
  y1_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tire_Line_Rect::y1() const {
  // @@protoc_insertion_point(field_get:transform.proto.Tire_Line_Rect.y1)
  return y1_;
}
inline void Tire_Line_Rect::set_y1(::google::protobuf::int64 value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Tire_Line_Rect.y1)
}

// int64 x2 = 3;
inline void Tire_Line_Rect::clear_x2() {
  x2_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tire_Line_Rect::x2() const {
  // @@protoc_insertion_point(field_get:transform.proto.Tire_Line_Rect.x2)
  return x2_;
}
inline void Tire_Line_Rect::set_x2(::google::protobuf::int64 value) {
  
  x2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Tire_Line_Rect.x2)
}

// int64 y2 = 4;
inline void Tire_Line_Rect::clear_y2() {
  y2_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tire_Line_Rect::y2() const {
  // @@protoc_insertion_point(field_get:transform.proto.Tire_Line_Rect.y2)
  return y2_;
}
inline void Tire_Line_Rect::set_y2(::google::protobuf::int64 value) {
  
  y2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Tire_Line_Rect.y2)
}

// -------------------------------------------------------------------

// Size2f

// double width = 1;
inline void Size2f::clear_width() {
  width_ = 0;
}
inline double Size2f::width() const {
  // @@protoc_insertion_point(field_get:transform.proto.Size2f.width)
  return width_;
}
inline void Size2f::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Size2f.width)
}

// double length = 2;
inline void Size2f::clear_length() {
  length_ = 0;
}
inline double Size2f::length() const {
  // @@protoc_insertion_point(field_get:transform.proto.Size2f.length)
  return length_;
}
inline void Size2f::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Size2f.length)
}

// -------------------------------------------------------------------

// Image

// bytes data = 1;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:transform.proto.Image.data)
  return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Image.data)
}
inline ::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:transform.proto.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Image.data)
}

// int64 timestamp = 2;
inline void Image::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Image::timestamp() const {
  // @@protoc_insertion_point(field_get:transform.proto.Image.timestamp)
  return timestamp_;
}
inline void Image::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Image.timestamp)
}

// -------------------------------------------------------------------

// Can

// int64 id = 1;
inline void Can::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Can::id() const {
  // @@protoc_insertion_point(field_get:transform.proto.Can.id)
  return id_;
}
inline void Can::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Can.id)
}

// int64 dlc = 2;
inline void Can::clear_dlc() {
  dlc_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Can::dlc() const {
  // @@protoc_insertion_point(field_get:transform.proto.Can.dlc)
  return dlc_;
}
inline void Can::set_dlc(::google::protobuf::int64 value) {
  
  dlc_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Can.dlc)
}

// bytes data = 3;
inline void Can::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Can::data() const {
  // @@protoc_insertion_point(field_get:transform.proto.Can.data)
  return data_.GetNoArena();
}
inline void Can::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Can.data)
}
#if LANG_CXX11
inline void Can::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Can.data)
}
#endif
inline void Can::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Can.data)
}
inline void Can::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Can.data)
}
inline ::std::string* Can::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Can.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Can::release_data() {
  // @@protoc_insertion_point(field_release:transform.proto.Can.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Can::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Can.data)
}

// int64 timestamp = 4;
inline void Can::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Can::timestamp() const {
  // @@protoc_insertion_point(field_get:transform.proto.Can.timestamp)
  return timestamp_;
}
inline void Can::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Can.timestamp)
}

// int32 channel = 5;
inline void Can::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 Can::channel() const {
  // @@protoc_insertion_point(field_get:transform.proto.Can.channel)
  return channel_;
}
inline void Can::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Can.channel)
}

// -------------------------------------------------------------------

// CarCanInfo

// double speed = 1;
inline void CarCanInfo::clear_speed() {
  speed_ = 0;
}
inline double CarCanInfo::speed() const {
  // @@protoc_insertion_point(field_get:transform.proto.CarCanInfo.speed)
  return speed_;
}
inline void CarCanInfo::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CarCanInfo.speed)
}

// double yawrate = 2;
inline void CarCanInfo::clear_yawrate() {
  yawrate_ = 0;
}
inline double CarCanInfo::yawrate() const {
  // @@protoc_insertion_point(field_get:transform.proto.CarCanInfo.yawrate)
  return yawrate_;
}
inline void CarCanInfo::set_yawrate(double value) {
  
  yawrate_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CarCanInfo.yawrate)
}

// int32 brake = 3;
inline void CarCanInfo::clear_brake() {
  brake_ = 0;
}
inline ::google::protobuf::int32 CarCanInfo::brake() const {
  // @@protoc_insertion_point(field_get:transform.proto.CarCanInfo.brake)
  return brake_;
}
inline void CarCanInfo::set_brake(::google::protobuf::int32 value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CarCanInfo.brake)
}

// -------------------------------------------------------------------

// CaliInfo

// double fx = 1;
inline void CaliInfo::clear_fx() {
  fx_ = 0;
}
inline double CaliInfo::fx() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.fx)
  return fx_;
}
inline void CaliInfo::set_fx(double value) {
  
  fx_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.fx)
}

// double fy = 2;
inline void CaliInfo::clear_fy() {
  fy_ = 0;
}
inline double CaliInfo::fy() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.fy)
  return fy_;
}
inline void CaliInfo::set_fy(double value) {
  
  fy_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.fy)
}

// double cx = 3;
inline void CaliInfo::clear_cx() {
  cx_ = 0;
}
inline double CaliInfo::cx() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.cx)
  return cx_;
}
inline void CaliInfo::set_cx(double value) {
  
  cx_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.cx)
}

// double cy = 4;
inline void CaliInfo::clear_cy() {
  cy_ = 0;
}
inline double CaliInfo::cy() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.cy)
  return cy_;
}
inline void CaliInfo::set_cy(double value) {
  
  cy_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.cy)
}

// double pitch = 5;
inline void CaliInfo::clear_pitch() {
  pitch_ = 0;
}
inline double CaliInfo::pitch() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.pitch)
  return pitch_;
}
inline void CaliInfo::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.pitch)
}

// double yaw = 6;
inline void CaliInfo::clear_yaw() {
  yaw_ = 0;
}
inline double CaliInfo::yaw() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.yaw)
  return yaw_;
}
inline void CaliInfo::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.yaw)
}

// double roll = 7;
inline void CaliInfo::clear_roll() {
  roll_ = 0;
}
inline double CaliInfo::roll() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.roll)
  return roll_;
}
inline void CaliInfo::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.roll)
}

// double H = 8;
inline void CaliInfo::clear_h() {
  h_ = 0;
}
inline double CaliInfo::h() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.H)
  return h_;
}
inline void CaliInfo::set_h(double value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.H)
}

// double X = 9;
inline void CaliInfo::clear_x() {
  x_ = 0;
}
inline double CaliInfo::x() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.X)
  return x_;
}
inline void CaliInfo::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.X)
}

// double Y = 10;
inline void CaliInfo::clear_y() {
  y_ = 0;
}
inline double CaliInfo::y() const {
  // @@protoc_insertion_point(field_get:transform.proto.CaliInfo.Y)
  return y_;
}
inline void CaliInfo::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.CaliInfo.Y)
}

// -------------------------------------------------------------------

// Object

// int64 camera_type = 1;
inline void Object::clear_camera_type() {
  camera_type_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::camera_type() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.camera_type)
  return camera_type_;
}
inline void Object::set_camera_type(::google::protobuf::int64 value) {
  
  camera_type_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.camera_type)
}

// int64 id = 2;
inline void Object::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::id() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.id)
  return id_;
}
inline void Object::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.id)
}

// int64 class_ = 3;
inline void Object::clear_class_() {
  class__ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::class_() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.class_)
  return class__;
}
inline void Object::set_class_(::google::protobuf::int64 value) {
  
  class__ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.class_)
}

// string class_name = 4;
inline void Object::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::class_name() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.class_name)
  return class_name_.GetNoArena();
}
inline void Object::set_class_name(const ::std::string& value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Object.class_name)
}
#if LANG_CXX11
inline void Object::set_class_name(::std::string&& value) {
  
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Object.class_name)
}
#endif
inline void Object::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Object.class_name)
}
inline void Object::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Object.class_name)
}
inline ::std::string* Object::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_class_name() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.class_name)
  
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.class_name)
}

// int64 subclass = 5;
inline void Object::clear_subclass() {
  subclass_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::subclass() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.subclass)
  return subclass_;
}
inline void Object::set_subclass(::google::protobuf::int64 value) {
  
  subclass_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.subclass)
}

// string subclass_name = 6;
inline void Object::clear_subclass_name() {
  subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::subclass_name() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.subclass_name)
  return subclass_name_.GetNoArena();
}
inline void Object::set_subclass_name(const ::std::string& value) {
  
  subclass_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Object.subclass_name)
}
#if LANG_CXX11
inline void Object::set_subclass_name(::std::string&& value) {
  
  subclass_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Object.subclass_name)
}
#endif
inline void Object::set_subclass_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subclass_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Object.subclass_name)
}
inline void Object::set_subclass_name(const char* value, size_t size) {
  
  subclass_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Object.subclass_name)
}
inline ::std::string* Object::mutable_subclass_name() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.subclass_name)
  return subclass_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_subclass_name() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.subclass_name)
  
  return subclass_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_subclass_name(::std::string* subclass_name) {
  if (subclass_name != NULL) {
    
  } else {
    
  }
  subclass_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subclass_name);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.subclass_name)
}

// double confidence = 7;
inline void Object::clear_confidence() {
  confidence_ = 0;
}
inline double Object::confidence() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.confidence)
  return confidence_;
}
inline void Object::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.confidence)
}

// .transform.proto.Rect bbox = 8;
inline bool Object::has_bbox() const {
  return this != internal_default_instance() && bbox_ != NULL;
}
inline void Object::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
inline const ::transform::proto::Rect& Object::_internal_bbox() const {
  return *bbox_;
}
inline const ::transform::proto::Rect& Object::bbox() const {
  const ::transform::proto::Rect* p = bbox_;
  // @@protoc_insertion_point(field_get:transform.proto.Object.bbox)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Rect*>(
      &::transform::proto::_Rect_default_instance_);
}
inline ::transform::proto::Rect* Object::release_bbox() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.bbox)
  
  ::transform::proto::Rect* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline ::transform::proto::Rect* Object::mutable_bbox() {
  
  if (bbox_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Rect>(GetArenaNoVirtual());
    bbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.bbox)
  return bbox_;
}
inline void Object::set_allocated_bbox(::transform::proto::Rect* bbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bbox_;
  }
  if (bbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.bbox)
}

// int64 detail_class = 9;
inline void Object::clear_detail_class() {
  detail_class_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::detail_class() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.detail_class)
  return detail_class_;
}
inline void Object::set_detail_class(::google::protobuf::int64 value) {
  
  detail_class_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.detail_class)
}

// double detail_conf = 10;
inline void Object::clear_detail_conf() {
  detail_conf_ = 0;
}
inline double Object::detail_conf() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.detail_conf)
  return detail_conf_;
}
inline void Object::set_detail_conf(double value) {
  
  detail_conf_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.detail_conf)
}

// .transform.proto.Rect detail_bbox = 11;
inline bool Object::has_detail_bbox() const {
  return this != internal_default_instance() && detail_bbox_ != NULL;
}
inline void Object::clear_detail_bbox() {
  if (GetArenaNoVirtual() == NULL && detail_bbox_ != NULL) {
    delete detail_bbox_;
  }
  detail_bbox_ = NULL;
}
inline const ::transform::proto::Rect& Object::_internal_detail_bbox() const {
  return *detail_bbox_;
}
inline const ::transform::proto::Rect& Object::detail_bbox() const {
  const ::transform::proto::Rect* p = detail_bbox_;
  // @@protoc_insertion_point(field_get:transform.proto.Object.detail_bbox)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Rect*>(
      &::transform::proto::_Rect_default_instance_);
}
inline ::transform::proto::Rect* Object::release_detail_bbox() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.detail_bbox)
  
  ::transform::proto::Rect* temp = detail_bbox_;
  detail_bbox_ = NULL;
  return temp;
}
inline ::transform::proto::Rect* Object::mutable_detail_bbox() {
  
  if (detail_bbox_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Rect>(GetArenaNoVirtual());
    detail_bbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.detail_bbox)
  return detail_bbox_;
}
inline void Object::set_allocated_detail_bbox(::transform::proto::Rect* detail_bbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete detail_bbox_;
  }
  if (detail_bbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      detail_bbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detail_bbox, submessage_arena);
    }
    
  } else {
    
  }
  detail_bbox_ = detail_bbox;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.detail_bbox)
}

// int64 viewpoint = 12;
inline void Object::clear_viewpoint() {
  viewpoint_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::viewpoint() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.viewpoint)
  return viewpoint_;
}
inline void Object::set_viewpoint(::google::protobuf::int64 value) {
  
  viewpoint_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.viewpoint)
}

// int64 side_ratio = 13;
inline void Object::clear_side_ratio() {
  side_ratio_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::side_ratio() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.side_ratio)
  return side_ratio_;
}
inline void Object::set_side_ratio(::google::protobuf::int64 value) {
  
  side_ratio_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.side_ratio)
}

// .transform.proto.Tire_Line_Rect tire_line = 14;
inline bool Object::has_tire_line() const {
  return this != internal_default_instance() && tire_line_ != NULL;
}
inline void Object::clear_tire_line() {
  if (GetArenaNoVirtual() == NULL && tire_line_ != NULL) {
    delete tire_line_;
  }
  tire_line_ = NULL;
}
inline const ::transform::proto::Tire_Line_Rect& Object::_internal_tire_line() const {
  return *tire_line_;
}
inline const ::transform::proto::Tire_Line_Rect& Object::tire_line() const {
  const ::transform::proto::Tire_Line_Rect* p = tire_line_;
  // @@protoc_insertion_point(field_get:transform.proto.Object.tire_line)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Tire_Line_Rect*>(
      &::transform::proto::_Tire_Line_Rect_default_instance_);
}
inline ::transform::proto::Tire_Line_Rect* Object::release_tire_line() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.tire_line)
  
  ::transform::proto::Tire_Line_Rect* temp = tire_line_;
  tire_line_ = NULL;
  return temp;
}
inline ::transform::proto::Tire_Line_Rect* Object::mutable_tire_line() {
  
  if (tire_line_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Tire_Line_Rect>(GetArenaNoVirtual());
    tire_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.tire_line)
  return tire_line_;
}
inline void Object::set_allocated_tire_line(::transform::proto::Tire_Line_Rect* tire_line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tire_line_;
  }
  if (tire_line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tire_line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tire_line, submessage_arena);
    }
    
  } else {
    
  }
  tire_line_ = tire_line;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.tire_line)
}

// int64 life_time = 15;
inline void Object::clear_life_time() {
  life_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::life_time() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.life_time)
  return life_time_;
}
inline void Object::set_life_time(::google::protobuf::int64 value) {
  
  life_time_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.life_time)
}

// int64 timestamp = 16;
inline void Object::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::timestamp() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.timestamp)
  return timestamp_;
}
inline void Object::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.timestamp)
}

// double height = 17;
inline void Object::clear_height() {
  height_ = 0;
}
inline double Object::height() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.height)
  return height_;
}
inline void Object::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.height)
}

// double width = 18;
inline void Object::clear_width() {
  width_ = 0;
}
inline double Object::width() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.width)
  return width_;
}
inline void Object::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.width)
}

// double length = 19;
inline void Object::clear_length() {
  length_ = 0;
}
inline double Object::length() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.length)
  return length_;
}
inline void Object::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.length)
}

// .transform.proto.Point distance = 20;
inline bool Object::has_distance() const {
  return this != internal_default_instance() && distance_ != NULL;
}
inline void Object::clear_distance() {
  if (GetArenaNoVirtual() == NULL && distance_ != NULL) {
    delete distance_;
  }
  distance_ = NULL;
}
inline const ::transform::proto::Point& Object::_internal_distance() const {
  return *distance_;
}
inline const ::transform::proto::Point& Object::distance() const {
  const ::transform::proto::Point* p = distance_;
  // @@protoc_insertion_point(field_get:transform.proto.Object.distance)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Object::release_distance() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.distance)
  
  ::transform::proto::Point* temp = distance_;
  distance_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Object::mutable_distance() {
  
  if (distance_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    distance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.distance)
  return distance_;
}
inline void Object::set_allocated_distance(::transform::proto::Point* distance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete distance_;
  }
  if (distance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      distance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distance, submessage_arena);
    }
    
  } else {
    
  }
  distance_ = distance;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.distance)
}

// .transform.proto.Point relative_velocity = 21;
inline bool Object::has_relative_velocity() const {
  return this != internal_default_instance() && relative_velocity_ != NULL;
}
inline void Object::clear_relative_velocity() {
  if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL) {
    delete relative_velocity_;
  }
  relative_velocity_ = NULL;
}
inline const ::transform::proto::Point& Object::_internal_relative_velocity() const {
  return *relative_velocity_;
}
inline const ::transform::proto::Point& Object::relative_velocity() const {
  const ::transform::proto::Point* p = relative_velocity_;
  // @@protoc_insertion_point(field_get:transform.proto.Object.relative_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Object::release_relative_velocity() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.relative_velocity)
  
  ::transform::proto::Point* temp = relative_velocity_;
  relative_velocity_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Object::mutable_relative_velocity() {
  
  if (relative_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    relative_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.relative_velocity)
  return relative_velocity_;
}
inline void Object::set_allocated_relative_velocity(::transform::proto::Point* relative_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relative_velocity_;
  }
  if (relative_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_velocity, submessage_arena);
    }
    
  } else {
    
  }
  relative_velocity_ = relative_velocity;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.relative_velocity)
}

// .transform.proto.Point relative_acceleration = 22;
inline bool Object::has_relative_acceleration() const {
  return this != internal_default_instance() && relative_acceleration_ != NULL;
}
inline void Object::clear_relative_acceleration() {
  if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL) {
    delete relative_acceleration_;
  }
  relative_acceleration_ = NULL;
}
inline const ::transform::proto::Point& Object::_internal_relative_acceleration() const {
  return *relative_acceleration_;
}
inline const ::transform::proto::Point& Object::relative_acceleration() const {
  const ::transform::proto::Point* p = relative_acceleration_;
  // @@protoc_insertion_point(field_get:transform.proto.Object.relative_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Object::release_relative_acceleration() {
  // @@protoc_insertion_point(field_release:transform.proto.Object.relative_acceleration)
  
  ::transform::proto::Point* temp = relative_acceleration_;
  relative_acceleration_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Object::mutable_relative_acceleration() {
  
  if (relative_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    relative_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Object.relative_acceleration)
  return relative_acceleration_;
}
inline void Object::set_allocated_relative_acceleration(::transform::proto::Point* relative_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relative_acceleration_;
  }
  if (relative_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  relative_acceleration_ = relative_acceleration;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Object.relative_acceleration)
}

// double ttc = 23;
inline void Object::clear_ttc() {
  ttc_ = 0;
}
inline double Object::ttc() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.ttc)
  return ttc_;
}
inline void Object::set_ttc(double value) {
  
  ttc_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.ttc)
}

// double thw = 24;
inline void Object::clear_thw() {
  thw_ = 0;
}
inline double Object::thw() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.thw)
  return thw_;
}
inline void Object::set_thw(double value) {
  
  thw_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.thw)
}

// double angle_left = 25;
inline void Object::clear_angle_left() {
  angle_left_ = 0;
}
inline double Object::angle_left() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.angle_left)
  return angle_left_;
}
inline void Object::set_angle_left(double value) {
  
  angle_left_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.angle_left)
}

// double angle_right = 26;
inline void Object::clear_angle_right() {
  angle_right_ = 0;
}
inline double Object::angle_right() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.angle_right)
  return angle_right_;
}
inline void Object::set_angle_right(double value) {
  
  angle_right_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.angle_right)
}

// double yaw_angle = 27;
inline void Object::clear_yaw_angle() {
  yaw_angle_ = 0;
}
inline double Object::yaw_angle() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.yaw_angle)
  return yaw_angle_;
}
inline void Object::set_yaw_angle(double value) {
  
  yaw_angle_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.yaw_angle)
}

// .transform.proto.Object.MotionStatus motion_status = 28;
inline void Object::clear_motion_status() {
  motion_status_ = 0;
}
inline ::transform::proto::Object_MotionStatus Object::motion_status() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.motion_status)
  return static_cast< ::transform::proto::Object_MotionStatus >(motion_status_);
}
inline void Object::set_motion_status(::transform::proto::Object_MotionStatus value) {
  
  motion_status_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.motion_status)
}

// int64 cipv = 29;
inline void Object::clear_cipv() {
  cipv_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::cipv() const {
  // @@protoc_insertion_point(field_get:transform.proto.Object.cipv)
  return cipv_;
}
inline void Object::set_cipv(::google::protobuf::int64 value) {
  
  cipv_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Object.cipv)
}

// -------------------------------------------------------------------

// Ped

// int64 id = 2;
inline void Ped::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped::id() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped.id)
  return id_;
}
inline void Ped::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped.id)
}

// int64 class_ = 3;
inline void Ped::clear_class_() {
  class__ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped::class_() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped.class_)
  return class__;
}
inline void Ped::set_class_(::google::protobuf::int64 value) {
  
  class__ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped.class_)
}

// double confidence = 7;
inline void Ped::clear_confidence() {
  confidence_ = 0;
}
inline double Ped::confidence() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped.confidence)
  return confidence_;
}
inline void Ped::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped.confidence)
}

// .transform.proto.Rect bbox = 8;
inline bool Ped::has_bbox() const {
  return this != internal_default_instance() && bbox_ != NULL;
}
inline void Ped::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
inline const ::transform::proto::Rect& Ped::_internal_bbox() const {
  return *bbox_;
}
inline const ::transform::proto::Rect& Ped::bbox() const {
  const ::transform::proto::Rect* p = bbox_;
  // @@protoc_insertion_point(field_get:transform.proto.Ped.bbox)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Rect*>(
      &::transform::proto::_Rect_default_instance_);
}
inline ::transform::proto::Rect* Ped::release_bbox() {
  // @@protoc_insertion_point(field_release:transform.proto.Ped.bbox)
  
  ::transform::proto::Rect* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline ::transform::proto::Rect* Ped::mutable_bbox() {
  
  if (bbox_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Rect>(GetArenaNoVirtual());
    bbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Ped.bbox)
  return bbox_;
}
inline void Ped::set_allocated_bbox(::transform::proto::Rect* bbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bbox_;
  }
  if (bbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Ped.bbox)
}

// double conf2 = 9;
inline void Ped::clear_conf2() {
  conf2_ = 0;
}
inline double Ped::conf2() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped.conf2)
  return conf2_;
}
inline void Ped::set_conf2(double value) {
  
  conf2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped.conf2)
}

// .transform.proto.Ped_Point ppoint = 10;
inline bool Ped::has_ppoint() const {
  return this != internal_default_instance() && ppoint_ != NULL;
}
inline void Ped::clear_ppoint() {
  if (GetArenaNoVirtual() == NULL && ppoint_ != NULL) {
    delete ppoint_;
  }
  ppoint_ = NULL;
}
inline const ::transform::proto::Ped_Point& Ped::_internal_ppoint() const {
  return *ppoint_;
}
inline const ::transform::proto::Ped_Point& Ped::ppoint() const {
  const ::transform::proto::Ped_Point* p = ppoint_;
  // @@protoc_insertion_point(field_get:transform.proto.Ped.ppoint)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Ped_Point*>(
      &::transform::proto::_Ped_Point_default_instance_);
}
inline ::transform::proto::Ped_Point* Ped::release_ppoint() {
  // @@protoc_insertion_point(field_release:transform.proto.Ped.ppoint)
  
  ::transform::proto::Ped_Point* temp = ppoint_;
  ppoint_ = NULL;
  return temp;
}
inline ::transform::proto::Ped_Point* Ped::mutable_ppoint() {
  
  if (ppoint_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Ped_Point>(GetArenaNoVirtual());
    ppoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Ped.ppoint)
  return ppoint_;
}
inline void Ped::set_allocated_ppoint(::transform::proto::Ped_Point* ppoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ppoint_;
  }
  if (ppoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ppoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ppoint, submessage_arena);
    }
    
  } else {
    
  }
  ppoint_ = ppoint;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Ped.ppoint)
}

// .transform.proto.Point distance = 11;
inline bool Ped::has_distance() const {
  return this != internal_default_instance() && distance_ != NULL;
}
inline void Ped::clear_distance() {
  if (GetArenaNoVirtual() == NULL && distance_ != NULL) {
    delete distance_;
  }
  distance_ = NULL;
}
inline const ::transform::proto::Point& Ped::_internal_distance() const {
  return *distance_;
}
inline const ::transform::proto::Point& Ped::distance() const {
  const ::transform::proto::Point* p = distance_;
  // @@protoc_insertion_point(field_get:transform.proto.Ped.distance)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Ped::release_distance() {
  // @@protoc_insertion_point(field_release:transform.proto.Ped.distance)
  
  ::transform::proto::Point* temp = distance_;
  distance_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Ped::mutable_distance() {
  
  if (distance_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    distance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Ped.distance)
  return distance_;
}
inline void Ped::set_allocated_distance(::transform::proto::Point* distance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete distance_;
  }
  if (distance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      distance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distance, submessage_arena);
    }
    
  } else {
    
  }
  distance_ = distance;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Ped.distance)
}

// .transform.proto.Point relative_velocity = 12;
inline bool Ped::has_relative_velocity() const {
  return this != internal_default_instance() && relative_velocity_ != NULL;
}
inline void Ped::clear_relative_velocity() {
  if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL) {
    delete relative_velocity_;
  }
  relative_velocity_ = NULL;
}
inline const ::transform::proto::Point& Ped::_internal_relative_velocity() const {
  return *relative_velocity_;
}
inline const ::transform::proto::Point& Ped::relative_velocity() const {
  const ::transform::proto::Point* p = relative_velocity_;
  // @@protoc_insertion_point(field_get:transform.proto.Ped.relative_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Ped::release_relative_velocity() {
  // @@protoc_insertion_point(field_release:transform.proto.Ped.relative_velocity)
  
  ::transform::proto::Point* temp = relative_velocity_;
  relative_velocity_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Ped::mutable_relative_velocity() {
  
  if (relative_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    relative_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Ped.relative_velocity)
  return relative_velocity_;
}
inline void Ped::set_allocated_relative_velocity(::transform::proto::Point* relative_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relative_velocity_;
  }
  if (relative_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_velocity, submessage_arena);
    }
    
  } else {
    
  }
  relative_velocity_ = relative_velocity;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Ped.relative_velocity)
}

// .transform.proto.Point relative_acceleration = 13;
inline bool Ped::has_relative_acceleration() const {
  return this != internal_default_instance() && relative_acceleration_ != NULL;
}
inline void Ped::clear_relative_acceleration() {
  if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL) {
    delete relative_acceleration_;
  }
  relative_acceleration_ = NULL;
}
inline const ::transform::proto::Point& Ped::_internal_relative_acceleration() const {
  return *relative_acceleration_;
}
inline const ::transform::proto::Point& Ped::relative_acceleration() const {
  const ::transform::proto::Point* p = relative_acceleration_;
  // @@protoc_insertion_point(field_get:transform.proto.Ped.relative_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Ped::release_relative_acceleration() {
  // @@protoc_insertion_point(field_release:transform.proto.Ped.relative_acceleration)
  
  ::transform::proto::Point* temp = relative_acceleration_;
  relative_acceleration_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Ped::mutable_relative_acceleration() {
  
  if (relative_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    relative_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Ped.relative_acceleration)
  return relative_acceleration_;
}
inline void Ped::set_allocated_relative_acceleration(::transform::proto::Point* relative_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relative_acceleration_;
  }
  if (relative_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  relative_acceleration_ = relative_acceleration;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Ped.relative_acceleration)
}

// int64 cipp = 14;
inline void Ped::clear_cipp() {
  cipp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ped::cipp() const {
  // @@protoc_insertion_point(field_get:transform.proto.Ped.cipp)
  return cipp_;
}
inline void Ped::set_cipp(::google::protobuf::int64 value) {
  
  cipp_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Ped.cipp)
}

// -------------------------------------------------------------------

// LaneOrigin

// double conf = 1;
inline void LaneOrigin::clear_conf() {
  conf_ = 0;
}
inline double LaneOrigin::conf() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.conf)
  return conf_;
}
inline void LaneOrigin::set_conf(double value) {
  
  conf_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.conf)
}

// double x = 2;
inline void LaneOrigin::clear_x() {
  x_ = 0;
}
inline double LaneOrigin::x() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.x)
  return x_;
}
inline void LaneOrigin::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.x)
}

// double y = 3;
inline void LaneOrigin::clear_y() {
  y_ = 0;
}
inline double LaneOrigin::y() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.y)
  return y_;
}
inline void LaneOrigin::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.y)
}

// double z = 4;
inline void LaneOrigin::clear_z() {
  z_ = 0;
}
inline double LaneOrigin::z() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.z)
  return z_;
}
inline void LaneOrigin::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.z)
}

// int32 tps = 5;
inline void LaneOrigin::clear_tps() {
  tps_ = 0;
}
inline ::google::protobuf::int32 LaneOrigin::tps() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.tps)
  return tps_;
}
inline void LaneOrigin::set_tps(::google::protobuf::int32 value) {
  
  tps_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.tps)
}

// double k = 6;
inline void LaneOrigin::clear_k() {
  k_ = 0;
}
inline double LaneOrigin::k() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.k)
  return k_;
}
inline void LaneOrigin::set_k(double value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.k)
}

// double f1 = 7;
inline void LaneOrigin::clear_f1() {
  f1_ = 0;
}
inline double LaneOrigin::f1() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.f1)
  return f1_;
}
inline void LaneOrigin::set_f1(double value) {
  
  f1_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.f1)
}

// double f2 = 8;
inline void LaneOrigin::clear_f2() {
  f2_ = 0;
}
inline double LaneOrigin::f2() const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.f2)
  return f2_;
}
inline void LaneOrigin::set_f2(double value) {
  
  f2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.f2)
}

// repeated double ex_data = 10;
inline int LaneOrigin::ex_data_size() const {
  return ex_data_.size();
}
inline void LaneOrigin::clear_ex_data() {
  ex_data_.Clear();
}
inline double LaneOrigin::ex_data(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.LaneOrigin.ex_data)
  return ex_data_.Get(index);
}
inline void LaneOrigin::set_ex_data(int index, double value) {
  ex_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:transform.proto.LaneOrigin.ex_data)
}
inline void LaneOrigin::add_ex_data(double value) {
  ex_data_.Add(value);
  // @@protoc_insertion_point(field_add:transform.proto.LaneOrigin.ex_data)
}
inline const ::google::protobuf::RepeatedField< double >&
LaneOrigin::ex_data() const {
  // @@protoc_insertion_point(field_list:transform.proto.LaneOrigin.ex_data)
  return ex_data_;
}
inline ::google::protobuf::RepeatedField< double >*
LaneOrigin::mutable_ex_data() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.LaneOrigin.ex_data)
  return &ex_data_;
}

// -------------------------------------------------------------------

// Lane

// .transform.proto.Lane.CoordinateType coordinate_type = 1;
inline void Lane::clear_coordinate_type() {
  coordinate_type_ = 0;
}
inline ::transform::proto::Lane_CoordinateType Lane::coordinate_type() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.coordinate_type)
  return static_cast< ::transform::proto::Lane_CoordinateType >(coordinate_type_);
}
inline void Lane::set_coordinate_type(::transform::proto::Lane_CoordinateType value) {
  
  coordinate_type_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.coordinate_type)
}

// double C0 = 2;
inline void Lane::clear_c0() {
  c0_ = 0;
}
inline double Lane::c0() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.C0)
  return c0_;
}
inline void Lane::set_c0(double value) {
  
  c0_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.C0)
}

// double C1 = 3;
inline void Lane::clear_c1() {
  c1_ = 0;
}
inline double Lane::c1() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.C1)
  return c1_;
}
inline void Lane::set_c1(double value) {
  
  c1_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.C1)
}

// double C2 = 4;
inline void Lane::clear_c2() {
  c2_ = 0;
}
inline double Lane::c2() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.C2)
  return c2_;
}
inline void Lane::set_c2(double value) {
  
  c2_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.C2)
}

// double C3 = 5;
inline void Lane::clear_c3() {
  c3_ = 0;
}
inline double Lane::c3() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.C3)
  return c3_;
}
inline void Lane::set_c3(double value) {
  
  c3_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.C3)
}

// int64 index = 6;
inline void Lane::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lane::index() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.index)
  return index_;
}
inline void Lane::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.index)
}

// int64 quality = 7;
inline void Lane::clear_quality() {
  quality_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lane::quality() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.quality)
  return quality_;
}
inline void Lane::set_quality(::google::protobuf::int64 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.quality)
}

// .transform.proto.Lane.LineType line_type = 8;
inline void Lane::clear_line_type() {
  line_type_ = 0;
}
inline ::transform::proto::Lane_LineType Lane::line_type() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.line_type)
  return static_cast< ::transform::proto::Lane_LineType >(line_type_);
}
inline void Lane::set_line_type(::transform::proto::Lane_LineType value) {
  
  line_type_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.line_type)
}

// .transform.proto.Lane.LineColor line_color = 9;
inline void Lane::clear_line_color() {
  line_color_ = 0;
}
inline ::transform::proto::Lane_LineColor Lane::line_color() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.line_color)
  return static_cast< ::transform::proto::Lane_LineColor >(line_color_);
}
inline void Lane::set_line_color(::transform::proto::Lane_LineColor value) {
  
  line_color_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.line_color)
}

// .transform.proto.Point start = 10;
inline bool Lane::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline void Lane::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
inline const ::transform::proto::Point& Lane::_internal_start() const {
  return *start_;
}
inline const ::transform::proto::Point& Lane::start() const {
  const ::transform::proto::Point* p = start_;
  // @@protoc_insertion_point(field_get:transform.proto.Lane.start)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Lane::release_start() {
  // @@protoc_insertion_point(field_release:transform.proto.Lane.start)
  
  ::transform::proto::Point* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Lane::mutable_start() {
  
  if (start_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Lane.start)
  return start_;
}
inline void Lane::set_allocated_start(::transform::proto::Point* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Lane.start)
}

// .transform.proto.Point end = 11;
inline bool Lane::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
inline void Lane::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
}
inline const ::transform::proto::Point& Lane::_internal_end() const {
  return *end_;
}
inline const ::transform::proto::Point& Lane::end() const {
  const ::transform::proto::Point* p = end_;
  // @@protoc_insertion_point(field_get:transform.proto.Lane.end)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Point*>(
      &::transform::proto::_Point_default_instance_);
}
inline ::transform::proto::Point* Lane::release_end() {
  // @@protoc_insertion_point(field_release:transform.proto.Lane.end)
  
  ::transform::proto::Point* temp = end_;
  end_ = NULL;
  return temp;
}
inline ::transform::proto::Point* Lane::mutable_end() {
  
  if (end_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Point>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Lane.end)
  return end_;
}
inline void Lane::set_allocated_end(::transform::proto::Point* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Lane.end)
}

// double distance_to_host = 12;
inline void Lane::clear_distance_to_host() {
  distance_to_host_ = 0;
}
inline double Lane::distance_to_host() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.distance_to_host)
  return distance_to_host_;
}
inline void Lane::set_distance_to_host(double value) {
  
  distance_to_host_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.distance_to_host)
}

// repeated .transform.proto.Point image_points = 13;
inline int Lane::image_points_size() const {
  return image_points_.size();
}
inline void Lane::clear_image_points() {
  image_points_.Clear();
}
inline ::transform::proto::Point* Lane::mutable_image_points(int index) {
  // @@protoc_insertion_point(field_mutable:transform.proto.Lane.image_points)
  return image_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::transform::proto::Point >*
Lane::mutable_image_points() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.Lane.image_points)
  return &image_points_;
}
inline const ::transform::proto::Point& Lane::image_points(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.image_points)
  return image_points_.Get(index);
}
inline ::transform::proto::Point* Lane::add_image_points() {
  // @@protoc_insertion_point(field_add:transform.proto.Lane.image_points)
  return image_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transform::proto::Point >&
Lane::image_points() const {
  // @@protoc_insertion_point(field_list:transform.proto.Lane.image_points)
  return image_points_;
}

// repeated .transform.proto.LaneOrigin lane_origin = 14;
inline int Lane::lane_origin_size() const {
  return lane_origin_.size();
}
inline void Lane::clear_lane_origin() {
  lane_origin_.Clear();
}
inline ::transform::proto::LaneOrigin* Lane::mutable_lane_origin(int index) {
  // @@protoc_insertion_point(field_mutable:transform.proto.Lane.lane_origin)
  return lane_origin_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::transform::proto::LaneOrigin >*
Lane::mutable_lane_origin() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.Lane.lane_origin)
  return &lane_origin_;
}
inline const ::transform::proto::LaneOrigin& Lane::lane_origin(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.lane_origin)
  return lane_origin_.Get(index);
}
inline ::transform::proto::LaneOrigin* Lane::add_lane_origin() {
  // @@protoc_insertion_point(field_add:transform.proto.Lane.lane_origin)
  return lane_origin_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transform::proto::LaneOrigin >&
Lane::lane_origin() const {
  // @@protoc_insertion_point(field_list:transform.proto.Lane.lane_origin)
  return lane_origin_;
}

// double width = 16;
inline void Lane::clear_width() {
  width_ = 0;
}
inline double Lane::width() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.width)
  return width_;
}
inline void Lane::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.width)
}

// int64 line_id = 17;
inline void Lane::clear_line_id() {
  line_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lane::line_id() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.line_id)
  return line_id_;
}
inline void Lane::set_line_id(::google::protobuf::int64 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.line_id)
}

// int64 camera_index = 18;
inline void Lane::clear_camera_index() {
  camera_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lane::camera_index() const {
  // @@protoc_insertion_point(field_get:transform.proto.Lane.camera_index)
  return camera_index_;
}
inline void Lane::set_camera_index(::google::protobuf::int64 value) {
  
  camera_index_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Lane.camera_index)
}

// .transform.proto.CaliInfo cali_info = 19;
inline bool Lane::has_cali_info() const {
  return this != internal_default_instance() && cali_info_ != NULL;
}
inline void Lane::clear_cali_info() {
  if (GetArenaNoVirtual() == NULL && cali_info_ != NULL) {
    delete cali_info_;
  }
  cali_info_ = NULL;
}
inline const ::transform::proto::CaliInfo& Lane::_internal_cali_info() const {
  return *cali_info_;
}
inline const ::transform::proto::CaliInfo& Lane::cali_info() const {
  const ::transform::proto::CaliInfo* p = cali_info_;
  // @@protoc_insertion_point(field_get:transform.proto.Lane.cali_info)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::CaliInfo*>(
      &::transform::proto::_CaliInfo_default_instance_);
}
inline ::transform::proto::CaliInfo* Lane::release_cali_info() {
  // @@protoc_insertion_point(field_release:transform.proto.Lane.cali_info)
  
  ::transform::proto::CaliInfo* temp = cali_info_;
  cali_info_ = NULL;
  return temp;
}
inline ::transform::proto::CaliInfo* Lane::mutable_cali_info() {
  
  if (cali_info_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::CaliInfo>(GetArenaNoVirtual());
    cali_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Lane.cali_info)
  return cali_info_;
}
inline void Lane::set_allocated_cali_info(::transform::proto::CaliInfo* cali_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cali_info_;
  }
  if (cali_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cali_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cali_info, submessage_arena);
    }
    
  } else {
    
  }
  cali_info_ = cali_info;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Lane.cali_info)
}

// -------------------------------------------------------------------

// Header

// string serial_number = 1;
inline void Header::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::serial_number() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.serial_number)
  return serial_number_.GetNoArena();
}
inline void Header::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.serial_number)
}
#if LANG_CXX11
inline void Header::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.serial_number)
}
#endif
inline void Header::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.serial_number)
}
inline void Header::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.serial_number)
}
inline ::std::string* Header::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_serial_number() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.serial_number)
}

// string protocol_version = 2;
inline void Header::clear_protocol_version() {
  protocol_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::protocol_version() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.protocol_version)
  return protocol_version_.GetNoArena();
}
inline void Header::set_protocol_version(const ::std::string& value) {
  
  protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.protocol_version)
}
#if LANG_CXX11
inline void Header::set_protocol_version(::std::string&& value) {
  
  protocol_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.protocol_version)
}
#endif
inline void Header::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.protocol_version)
}
inline void Header::set_protocol_version(const char* value, size_t size) {
  
  protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.protocol_version)
}
inline ::std::string* Header::mutable_protocol_version() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.protocol_version)
  return protocol_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_protocol_version() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.protocol_version)
  
  return protocol_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.protocol_version)
}

// string hard_version = 3;
inline void Header::clear_hard_version() {
  hard_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::hard_version() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.hard_version)
  return hard_version_.GetNoArena();
}
inline void Header::set_hard_version(const ::std::string& value) {
  
  hard_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.hard_version)
}
#if LANG_CXX11
inline void Header::set_hard_version(::std::string&& value) {
  
  hard_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.hard_version)
}
#endif
inline void Header::set_hard_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hard_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.hard_version)
}
inline void Header::set_hard_version(const char* value, size_t size) {
  
  hard_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.hard_version)
}
inline ::std::string* Header::mutable_hard_version() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.hard_version)
  return hard_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_hard_version() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.hard_version)
  
  return hard_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_hard_version(::std::string* hard_version) {
  if (hard_version != NULL) {
    
  } else {
    
  }
  hard_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hard_version);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.hard_version)
}

// string soft_version = 4;
inline void Header::clear_soft_version() {
  soft_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::soft_version() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.soft_version)
  return soft_version_.GetNoArena();
}
inline void Header::set_soft_version(const ::std::string& value) {
  
  soft_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.soft_version)
}
#if LANG_CXX11
inline void Header::set_soft_version(::std::string&& value) {
  
  soft_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.soft_version)
}
#endif
inline void Header::set_soft_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  soft_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.soft_version)
}
inline void Header::set_soft_version(const char* value, size_t size) {
  
  soft_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.soft_version)
}
inline ::std::string* Header::mutable_soft_version() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.soft_version)
  return soft_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_soft_version() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.soft_version)
  
  return soft_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_soft_version(::std::string* soft_version) {
  if (soft_version != NULL) {
    
  } else {
    
  }
  soft_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), soft_version);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.soft_version)
}

// int64 image_format = 5;
inline void Header::clear_image_format() {
  image_format_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::image_format() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.image_format)
  return image_format_;
}
inline void Header::set_image_format(::google::protobuf::int64 value) {
  
  image_format_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Header.image_format)
}

// string car_type = 6;
inline void Header::clear_car_type() {
  car_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::car_type() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.car_type)
  return car_type_.GetNoArena();
}
inline void Header::set_car_type(const ::std::string& value) {
  
  car_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.car_type)
}
#if LANG_CXX11
inline void Header::set_car_type(::std::string&& value) {
  
  car_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.car_type)
}
#endif
inline void Header::set_car_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.car_type)
}
inline void Header::set_car_type(const char* value, size_t size) {
  
  car_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.car_type)
}
inline ::std::string* Header::mutable_car_type() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.car_type)
  return car_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_car_type() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.car_type)
  
  return car_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_car_type(::std::string* car_type) {
  if (car_type != NULL) {
    
  } else {
    
  }
  car_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_type);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.car_type)
}

// bytes tsintel_config = 7;
inline void Header::clear_tsintel_config() {
  tsintel_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::tsintel_config() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.tsintel_config)
  return tsintel_config_.GetNoArena();
}
inline void Header::set_tsintel_config(const ::std::string& value) {
  
  tsintel_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.tsintel_config)
}
#if LANG_CXX11
inline void Header::set_tsintel_config(::std::string&& value) {
  
  tsintel_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.tsintel_config)
}
#endif
inline void Header::set_tsintel_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tsintel_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.tsintel_config)
}
inline void Header::set_tsintel_config(const void* value, size_t size) {
  
  tsintel_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.tsintel_config)
}
inline ::std::string* Header::mutable_tsintel_config() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.tsintel_config)
  return tsintel_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_tsintel_config() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.tsintel_config)
  
  return tsintel_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_tsintel_config(::std::string* tsintel_config) {
  if (tsintel_config != NULL) {
    
  } else {
    
  }
  tsintel_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tsintel_config);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.tsintel_config)
}

// string run_mode = 8;
inline void Header::clear_run_mode() {
  run_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::run_mode() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.run_mode)
  return run_mode_.GetNoArena();
}
inline void Header::set_run_mode(const ::std::string& value) {
  
  run_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.run_mode)
}
#if LANG_CXX11
inline void Header::set_run_mode(::std::string&& value) {
  
  run_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.run_mode)
}
#endif
inline void Header::set_run_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  run_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.run_mode)
}
inline void Header::set_run_mode(const char* value, size_t size) {
  
  run_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.run_mode)
}
inline ::std::string* Header::mutable_run_mode() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.run_mode)
  return run_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_run_mode() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.run_mode)
  
  return run_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_run_mode(::std::string* run_mode) {
  if (run_mode != NULL) {
    
  } else {
    
  }
  run_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), run_mode);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.run_mode)
}

// string object_version = 9;
inline void Header::clear_object_version() {
  object_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::object_version() const {
  // @@protoc_insertion_point(field_get:transform.proto.Header.object_version)
  return object_version_.GetNoArena();
}
inline void Header::set_object_version(const ::std::string& value) {
  
  object_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transform.proto.Header.object_version)
}
#if LANG_CXX11
inline void Header::set_object_version(::std::string&& value) {
  
  object_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transform.proto.Header.object_version)
}
#endif
inline void Header::set_object_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  object_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transform.proto.Header.object_version)
}
inline void Header::set_object_version(const char* value, size_t size) {
  
  object_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transform.proto.Header.object_version)
}
inline ::std::string* Header::mutable_object_version() {
  
  // @@protoc_insertion_point(field_mutable:transform.proto.Header.object_version)
  return object_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_object_version() {
  // @@protoc_insertion_point(field_release:transform.proto.Header.object_version)
  
  return object_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_object_version(::std::string* object_version) {
  if (object_version != NULL) {
    
  } else {
    
  }
  object_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_version);
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Header.object_version)
}

// -------------------------------------------------------------------

// Frame

// .transform.proto.Header header = 1;
inline bool Frame::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Frame::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::transform::proto::Header& Frame::_internal_header() const {
  return *header_;
}
inline const ::transform::proto::Header& Frame::header() const {
  const ::transform::proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:transform.proto.Frame.header)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Header*>(
      &::transform::proto::_Header_default_instance_);
}
inline ::transform::proto::Header* Frame::release_header() {
  // @@protoc_insertion_point(field_release:transform.proto.Frame.header)
  
  ::transform::proto::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::transform::proto::Header* Frame::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.header)
  return header_;
}
inline void Frame::set_allocated_header(::transform::proto::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Frame.header)
}

// int64 id = 2;
inline void Frame::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::id() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.id)
  return id_;
}
inline void Frame::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.id)
}

// repeated .transform.proto.Can raw_can = 3;
inline int Frame::raw_can_size() const {
  return raw_can_.size();
}
inline void Frame::clear_raw_can() {
  raw_can_.Clear();
}
inline ::transform::proto::Can* Frame::mutable_raw_can(int index) {
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.raw_can)
  return raw_can_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::transform::proto::Can >*
Frame::mutable_raw_can() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.Frame.raw_can)
  return &raw_can_;
}
inline const ::transform::proto::Can& Frame::raw_can(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.raw_can)
  return raw_can_.Get(index);
}
inline ::transform::proto::Can* Frame::add_raw_can() {
  // @@protoc_insertion_point(field_add:transform.proto.Frame.raw_can)
  return raw_can_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transform::proto::Can >&
Frame::raw_can() const {
  // @@protoc_insertion_point(field_list:transform.proto.Frame.raw_can)
  return raw_can_;
}

// repeated .transform.proto.Object object = 4;
inline int Frame::object_size() const {
  return object_.size();
}
inline void Frame::clear_object() {
  object_.Clear();
}
inline ::transform::proto::Object* Frame::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.object)
  return object_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::transform::proto::Object >*
Frame::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.Frame.object)
  return &object_;
}
inline const ::transform::proto::Object& Frame::object(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.object)
  return object_.Get(index);
}
inline ::transform::proto::Object* Frame::add_object() {
  // @@protoc_insertion_point(field_add:transform.proto.Frame.object)
  return object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transform::proto::Object >&
Frame::object() const {
  // @@protoc_insertion_point(field_list:transform.proto.Frame.object)
  return object_;
}

// repeated .transform.proto.Ped ped = 5;
inline int Frame::ped_size() const {
  return ped_.size();
}
inline void Frame::clear_ped() {
  ped_.Clear();
}
inline ::transform::proto::Ped* Frame::mutable_ped(int index) {
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.ped)
  return ped_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::transform::proto::Ped >*
Frame::mutable_ped() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.Frame.ped)
  return &ped_;
}
inline const ::transform::proto::Ped& Frame::ped(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.ped)
  return ped_.Get(index);
}
inline ::transform::proto::Ped* Frame::add_ped() {
  // @@protoc_insertion_point(field_add:transform.proto.Frame.ped)
  return ped_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transform::proto::Ped >&
Frame::ped() const {
  // @@protoc_insertion_point(field_list:transform.proto.Frame.ped)
  return ped_;
}

// repeated .transform.proto.Lane lane = 6;
inline int Frame::lane_size() const {
  return lane_.size();
}
inline void Frame::clear_lane() {
  lane_.Clear();
}
inline ::transform::proto::Lane* Frame::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.lane)
  return lane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::transform::proto::Lane >*
Frame::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.Frame.lane)
  return &lane_;
}
inline const ::transform::proto::Lane& Frame::lane(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.lane)
  return lane_.Get(index);
}
inline ::transform::proto::Lane* Frame::add_lane() {
  // @@protoc_insertion_point(field_add:transform.proto.Frame.lane)
  return lane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transform::proto::Lane >&
Frame::lane() const {
  // @@protoc_insertion_point(field_list:transform.proto.Frame.lane)
  return lane_;
}

// int64 cipv_id = 7;
inline void Frame::clear_cipv_id() {
  cipv_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::cipv_id() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.cipv_id)
  return cipv_id_;
}
inline void Frame::set_cipv_id(::google::protobuf::int64 value) {
  
  cipv_id_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.cipv_id)
}

// int64 ldw_status = 8;
inline void Frame::clear_ldw_status() {
  ldw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::ldw_status() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.ldw_status)
  return ldw_status_;
}
inline void Frame::set_ldw_status(::google::protobuf::int64 value) {
  
  ldw_status_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.ldw_status)
}

// int64 fcw_status = 9;
inline void Frame::clear_fcw_status() {
  fcw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::fcw_status() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.fcw_status)
  return fcw_status_;
}
inline void Frame::set_fcw_status(::google::protobuf::int64 value) {
  
  fcw_status_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.fcw_status)
}

// int64 pcw_status = 10;
inline void Frame::clear_pcw_status() {
  pcw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::pcw_status() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.pcw_status)
  return pcw_status_;
}
inline void Frame::set_pcw_status(::google::protobuf::int64 value) {
  
  pcw_status_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.pcw_status)
}

// int64 asw_status = 11;
inline void Frame::clear_asw_status() {
  asw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::asw_status() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.asw_status)
  return asw_status_;
}
inline void Frame::set_asw_status(::google::protobuf::int64 value) {
  
  asw_status_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.asw_status)
}

// int64 bsd_status = 12;
inline void Frame::clear_bsd_status() {
  bsd_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::bsd_status() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.bsd_status)
  return bsd_status_;
}
inline void Frame::set_bsd_status(::google::protobuf::int64 value) {
  
  bsd_status_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.bsd_status)
}

// int64 lane_number = 13;
inline void Frame::clear_lane_number() {
  lane_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::lane_number() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.lane_number)
  return lane_number_;
}
inline void Frame::set_lane_number(::google::protobuf::int64 value) {
  
  lane_number_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.lane_number)
}

// double ttlc = 14;
inline void Frame::clear_ttlc() {
  ttlc_ = 0;
}
inline double Frame::ttlc() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.ttlc)
  return ttlc_;
}
inline void Frame::set_ttlc(double value) {
  
  ttlc_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.ttlc)
}

// int64 timestamp = 15;
inline void Frame::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.timestamp)
  return timestamp_;
}
inline void Frame::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.timestamp)
}

// .transform.proto.Image raw_image = 16;
inline bool Frame::has_raw_image() const {
  return this != internal_default_instance() && raw_image_ != NULL;
}
inline void Frame::clear_raw_image() {
  if (GetArenaNoVirtual() == NULL && raw_image_ != NULL) {
    delete raw_image_;
  }
  raw_image_ = NULL;
}
inline const ::transform::proto::Image& Frame::_internal_raw_image() const {
  return *raw_image_;
}
inline const ::transform::proto::Image& Frame::raw_image() const {
  const ::transform::proto::Image* p = raw_image_;
  // @@protoc_insertion_point(field_get:transform.proto.Frame.raw_image)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Image*>(
      &::transform::proto::_Image_default_instance_);
}
inline ::transform::proto::Image* Frame::release_raw_image() {
  // @@protoc_insertion_point(field_release:transform.proto.Frame.raw_image)
  
  ::transform::proto::Image* temp = raw_image_;
  raw_image_ = NULL;
  return temp;
}
inline ::transform::proto::Image* Frame::mutable_raw_image() {
  
  if (raw_image_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Image>(GetArenaNoVirtual());
    raw_image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.raw_image)
  return raw_image_;
}
inline void Frame::set_allocated_raw_image(::transform::proto::Image* raw_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete raw_image_;
  }
  if (raw_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raw_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_image, submessage_arena);
    }
    
  } else {
    
  }
  raw_image_ = raw_image;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Frame.raw_image)
}

// .transform.proto.CarCanInfo car_info = 17;
inline bool Frame::has_car_info() const {
  return this != internal_default_instance() && car_info_ != NULL;
}
inline void Frame::clear_car_info() {
  if (GetArenaNoVirtual() == NULL && car_info_ != NULL) {
    delete car_info_;
  }
  car_info_ = NULL;
}
inline const ::transform::proto::CarCanInfo& Frame::_internal_car_info() const {
  return *car_info_;
}
inline const ::transform::proto::CarCanInfo& Frame::car_info() const {
  const ::transform::proto::CarCanInfo* p = car_info_;
  // @@protoc_insertion_point(field_get:transform.proto.Frame.car_info)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::CarCanInfo*>(
      &::transform::proto::_CarCanInfo_default_instance_);
}
inline ::transform::proto::CarCanInfo* Frame::release_car_info() {
  // @@protoc_insertion_point(field_release:transform.proto.Frame.car_info)
  
  ::transform::proto::CarCanInfo* temp = car_info_;
  car_info_ = NULL;
  return temp;
}
inline ::transform::proto::CarCanInfo* Frame::mutable_car_info() {
  
  if (car_info_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::CarCanInfo>(GetArenaNoVirtual());
    car_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.car_info)
  return car_info_;
}
inline void Frame::set_allocated_car_info(::transform::proto::CarCanInfo* car_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete car_info_;
  }
  if (car_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      car_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, car_info, submessage_arena);
    }
    
  } else {
    
  }
  car_info_ = car_info;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Frame.car_info)
}

// .transform.proto.Rect lane_crop = 18;
inline bool Frame::has_lane_crop() const {
  return this != internal_default_instance() && lane_crop_ != NULL;
}
inline void Frame::clear_lane_crop() {
  if (GetArenaNoVirtual() == NULL && lane_crop_ != NULL) {
    delete lane_crop_;
  }
  lane_crop_ = NULL;
}
inline const ::transform::proto::Rect& Frame::_internal_lane_crop() const {
  return *lane_crop_;
}
inline const ::transform::proto::Rect& Frame::lane_crop() const {
  const ::transform::proto::Rect* p = lane_crop_;
  // @@protoc_insertion_point(field_get:transform.proto.Frame.lane_crop)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Rect*>(
      &::transform::proto::_Rect_default_instance_);
}
inline ::transform::proto::Rect* Frame::release_lane_crop() {
  // @@protoc_insertion_point(field_release:transform.proto.Frame.lane_crop)
  
  ::transform::proto::Rect* temp = lane_crop_;
  lane_crop_ = NULL;
  return temp;
}
inline ::transform::proto::Rect* Frame::mutable_lane_crop() {
  
  if (lane_crop_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Rect>(GetArenaNoVirtual());
    lane_crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.lane_crop)
  return lane_crop_;
}
inline void Frame::set_allocated_lane_crop(::transform::proto::Rect* lane_crop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_crop_;
  }
  if (lane_crop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_crop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_crop, submessage_arena);
    }
    
  } else {
    
  }
  lane_crop_ = lane_crop;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Frame.lane_crop)
}

// .transform.proto.Rect object_crop = 19;
inline bool Frame::has_object_crop() const {
  return this != internal_default_instance() && object_crop_ != NULL;
}
inline void Frame::clear_object_crop() {
  if (GetArenaNoVirtual() == NULL && object_crop_ != NULL) {
    delete object_crop_;
  }
  object_crop_ = NULL;
}
inline const ::transform::proto::Rect& Frame::_internal_object_crop() const {
  return *object_crop_;
}
inline const ::transform::proto::Rect& Frame::object_crop() const {
  const ::transform::proto::Rect* p = object_crop_;
  // @@protoc_insertion_point(field_get:transform.proto.Frame.object_crop)
  return p != NULL ? *p : *reinterpret_cast<const ::transform::proto::Rect*>(
      &::transform::proto::_Rect_default_instance_);
}
inline ::transform::proto::Rect* Frame::release_object_crop() {
  // @@protoc_insertion_point(field_release:transform.proto.Frame.object_crop)
  
  ::transform::proto::Rect* temp = object_crop_;
  object_crop_ = NULL;
  return temp;
}
inline ::transform::proto::Rect* Frame::mutable_object_crop() {
  
  if (object_crop_ == NULL) {
    auto* p = CreateMaybeMessage<::transform::proto::Rect>(GetArenaNoVirtual());
    object_crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:transform.proto.Frame.object_crop)
  return object_crop_;
}
inline void Frame::set_allocated_object_crop(::transform::proto::Rect* object_crop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete object_crop_;
  }
  if (object_crop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object_crop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_crop, submessage_arena);
    }
    
  } else {
    
  }
  object_crop_ = object_crop;
  // @@protoc_insertion_point(field_set_allocated:transform.proto.Frame.object_crop)
}

// int64 shutter = 20;
inline void Frame::clear_shutter() {
  shutter_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::shutter() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.shutter)
  return shutter_;
}
inline void Frame::set_shutter(::google::protobuf::int64 value) {
  
  shutter_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.shutter)
}

// .transform.proto.Region region = 21;
inline void Frame::clear_region() {
  region_ = 0;
}
inline ::transform::proto::Region Frame::region() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.region)
  return static_cast< ::transform::proto::Region >(region_);
}
inline void Frame::set_region(::transform::proto::Region value) {
  
  region_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.region)
}

// .transform.proto.Source source = 22;
inline void Frame::clear_source() {
  source_ = 0;
}
inline ::transform::proto::Source Frame::source() const {
  // @@protoc_insertion_point(field_get:transform.proto.Frame.source)
  return static_cast< ::transform::proto::Source >(source_);
}
inline void Frame::set_source(::transform::proto::Source value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:transform.proto.Frame.source)
}

// -------------------------------------------------------------------

// MultiFrame

// repeated .transform.proto.Frame frame = 1;
inline int MultiFrame::frame_size() const {
  return frame_.size();
}
inline void MultiFrame::clear_frame() {
  frame_.Clear();
}
inline ::transform::proto::Frame* MultiFrame::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:transform.proto.MultiFrame.frame)
  return frame_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::transform::proto::Frame >*
MultiFrame::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:transform.proto.MultiFrame.frame)
  return &frame_;
}
inline const ::transform::proto::Frame& MultiFrame::frame(int index) const {
  // @@protoc_insertion_point(field_get:transform.proto.MultiFrame.frame)
  return frame_.Get(index);
}
inline ::transform::proto::Frame* MultiFrame::add_frame() {
  // @@protoc_insertion_point(field_add:transform.proto.MultiFrame.frame)
  return frame_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::transform::proto::Frame >&
MultiFrame::frame() const {
  // @@protoc_insertion_point(field_list:transform.proto.MultiFrame.frame)
  return frame_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace transform

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::transform::proto::Object_MotionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transform::proto::Object_MotionStatus>() {
  return ::transform::proto::Object_MotionStatus_descriptor();
}
template <> struct is_proto_enum< ::transform::proto::Lane_CoordinateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transform::proto::Lane_CoordinateType>() {
  return ::transform::proto::Lane_CoordinateType_descriptor();
}
template <> struct is_proto_enum< ::transform::proto::Lane_LineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transform::proto::Lane_LineType>() {
  return ::transform::proto::Lane_LineType_descriptor();
}
template <> struct is_proto_enum< ::transform::proto::Lane_LineColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transform::proto::Lane_LineColor>() {
  return ::transform::proto::Lane_LineColor_descriptor();
}
template <> struct is_proto_enum< ::transform::proto::Region> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transform::proto::Region>() {
  return ::transform::proto::Region_descriptor();
}
template <> struct is_proto_enum< ::transform::proto::Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transform::proto::Source>() {
  return ::transform::proto::Source_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transform_2eproto
